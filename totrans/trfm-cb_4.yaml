- en: Using the Terraform CLI
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform CLI
- en: 'Terraform is an **Infrastructure as Code** (**IaC**) tool that consists of
    two linked elements: the Terraform configuration, written in **HashiCorp Configuration
    Language** (**HCL**), which describes the infrastructure we want to provision,
    and the Terraform client tool, which will analyze and execute our Terraform configuration.
    In the previous two chapters, we have studied a variety of recipes on writing
    Terraform configuration using variables, functions, and expressions of HCL.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一个**基础设施即代码**（**IaC**）工具，由两个相关的元素组成：用 **HashiCorp 配置语言**（**HCL**）编写的
    Terraform 配置，描述了我们要提供的基础设施，以及 Terraform 客户端工具，它将分析并执行我们的 Terraform 配置。在前两章中，我们已经学习了如何使用变量、函数和
    HCL 表达式来编写 Terraform 配置的多种方案。
- en: In this chapter, we will focus on the use of Terraform with its command lines
    and options. We will discuss how to have the code well presented, the destruction
    of resources, and the use of workspaces. Then we will learn how to import already
    existing resources, the taint functionality, and finally, we will see how to generate
    a dependency graph and debug the execution of Terraform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍 Terraform 的命令行和选项的使用。我们将讨论如何让代码格式规范、资源销毁和工作空间的使用。接着，我们将学习如何导入已存在的资源、标记功能，最后我们将看到如何生成依赖图并调试
    Terraform 的执行。
- en: 'We will cover the following recipes in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Keeping your Terraform configuration clean
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持 Terraform 配置的清洁
- en: Validating the code syntax
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证代码语法
- en: Destroying infrastructure resources
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销毁基础设施资源
- en: Using workspaces for managing environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工作空间来管理环境
- en: Importing existing resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入现有资源
- en: Exporting the output in JSON
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 JSON 格式导出输出
- en: Tainting resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记资源
- en: Generating the graph dependencies
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成图形依赖关系
- en: Debugging the Terraform execution
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试 Terraform 执行
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Contrary to the previous two chapters, the code examples provided in this chapter
    are not fundamental, since we will focus on the execution of Terraform command
    lines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与前两章相反，本章提供的代码示例不是基础性的，因为我们将专注于 Terraform 命令行的执行。
- en: 'In this chapter, to provide Terraform configuration samples, we will manage
    resources in Azure cloud; it is obvious that this also applies to all other Terraform
    providers. If you want to apply these recipes and don''t have an Azure account,
    you can create an Azure account for free at this site: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为了提供 Terraform 配置示例，我们将在 Azure 云中管理资源；显然，这也适用于所有其他 Terraform 提供商。如果你想应用这些方案而且没有
    Azure 账户，你可以在以下网站免费创建一个 Azure 账户：[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
- en: 'The code examples in this chapter are available here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例可以在这里找到：
- en: '[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04)'
- en: Check out the following video to see the Code in Action: [https://bit.ly/3m3oho7](https://bit.ly/3m3oho7)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际操作：[https://bit.ly/3m3oho7](https://bit.ly/3m3oho7)
- en: Keeping your Terraform configuration clean
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持 Terraform 配置的清洁
- en: In any application with code, it is very important that the code is clean and
    clearly readable by all contributors (current and future) who will be involved
    in the maintenance and evolution of this code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何有代码的应用中，代码的整洁和易读性对于所有参与维护和发展这段代码的贡献者（当前和未来）至关重要。
- en: In IaC and with Terraform, it is even more important to have clear code because written
    code serving as documentation is an advantage of IaC.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施即代码（IaC）和 Terraform 中，代码清晰非常重要，因为编写的代码作为文档是 IaC 的一个优势。
- en: In this recipe, we will look at how to use Terraform's command line to properly
    format its code and we will also see some tips for automating it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用 Terraform 的命令行来正确格式化代码，同时还会看到一些自动化的技巧。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, we will start with a `main.tf` file that contains the following
    Terraform configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们将从一个包含以下 Terraform 配置的 `main.tf` 文件开始：
- en: '![](img/2220917f-7221-4c62-99d6-38491466c531.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2220917f-7221-4c62-99d6-38491466c531.png)'
- en: As we can see, this code is not very readable; it needs to be better formatted.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这段代码并不太易读；它需要更好的格式化。
- en: To execute Terraform commands with the CLI, we use a command-line terminal (CMD,
    PowerShell, Bash, and so on) and the execution folder will be the folder containing
    the Terraform configuration of the recipe. This will apply to all recipes in this
    chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 CLI 执行 Terraform 命令，我们使用命令行终端（CMD、PowerShell、Bash 等），执行文件夹将是包含本教程 Terraform
    配置的文件夹。这适用于本章中的所有教程。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To fix the code indentation, execute the `terraform fmt` command as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复代码的缩进，按如下方式执行 `terraform fmt` 命令：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The `terraform fmt` command makes it easier to arrange the code with the correct
    indentation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform fmt` 命令使得以正确的缩进整理代码变得更加容易。'
- en: 'At the end of its execution, this command displays the list of files that have
    been modified, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 执行结束时，此命令会显示已修改的文件列表，如下图所示：
- en: '![](img/c7c7e0ad-f353-4a4b-8b36-d4a80accb9c1.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7c7e0ad-f353-4a4b-8b36-d4a80accb9c1.png)'
- en: We can see that executing the `terraform fmt` command modified our `main.tf`
    file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，执行 `terraform fmt` 命令修改了我们的 `main.tf` 文件。
- en: 'Then, we open the `main.tf` file and read it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们打开 `main.tf` 文件并阅读：
- en: '![](img/e14b773a-0f43-4f91-a0f0-e1b870a25614.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e14b773a-0f43-4f91-a0f0-e1b870a25614.png)'
- en: We can see in the preceding screenshot that the code has been well indented
    and so is more easily readable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上面的截图中看到，代码已经被很好地缩进，因此更易于阅读。
- en: There's more…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: In this recipe, we have learned that the `terraform fmt` command executed in
    its most basic way, that is, without any additional options.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们已经了解了以最基本的方式执行的 `terraform fmt` 命令，即不带任何附加选项的情况。
- en: This default command indents the Terraform file code, which is at the root of
    the current folder. We can also execute this command recursively, that is, it
    can also indent the code in subfolders of the current folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个默认命令会缩进当前文件夹根目录下的 Terraform 文件代码。我们也可以递归执行此命令，也就是说，它还可以缩进当前文件夹下子文件夹中的代码。
- en: 'To do this, we execute the `terraform fmt` command with the `-recursive` option
    and its output is shown in the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们执行带有 `-recursive` 选项的 `terraform fmt` 命令，输出如以下截图所示：
- en: '![](img/bfddf070-0e1d-4b04-887e-e361220ea6db.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfddf070-0e1d-4b04-887e-e361220ea6db.png)'
- en: We see that the command has also formatted the `main.tf` file in the `sub` folder.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到命令也格式化了 `sub` 文件夹中的 `main.tf` 文件。
- en: Among the other options of this command, there is also the `-check` option,
    which can be added and allows you to preview the files that will be indented,
    without applying the changes in the file(s).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了此命令的其他选项外，还有 `-check` 选项，可以添加此选项来预览将要缩进的文件，而不应用更改到文件中。
- en: Finally, it's also possible to automate the execution of this command, because
    apart from running it manually in a command terminal, as seen in this recipe,
    we can automate it to ensure that every time we save or commit a file in Git,
    the code provided and shared with the rest of the contributors will always be
    properly indented.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们也可以自动化执行此命令，因为除了像本教程中所示的那样手动在命令终端运行外，我们还可以将其自动化，以确保每次在 Git 中保存或提交文件时，与其他贡献者共享的代码始终保持正确的缩进。
- en: 'Thus, the IDEs that support Terraform have integrated the execution of this
    command natively with the writing of the code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，支持 Terraform 的集成开发环境（IDE）已经将此命令的执行与代码编写原生集成：
- en: 'With the Terraform extension of Visual Studio Code, we can have every Terraform
    file saved and formatted with the `terraform fmt` command. For more information,
    read the pertinent documentation: [https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 的 Terraform 扩展，我们可以让每个 Terraform 文件在保存时都使用 `terraform
    fmt` 命令进行格式化。欲了解更多信息，请参阅相关文档：[https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)。
- en: 'In IntelliJ, the Save action plugin enables the code to be formatted every
    time it is saved and the **Terraform** plugin has a large integration of the `terraform
    fmt` command within the IDE. Furthermore, with this Terraform plugin, it is possible
    to execute the `terraform fmt` command and arrange the code at every code commit,
    as shown in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 中，Save action 插件使得每次保存代码时都能自动格式化，而**Terraform**插件则在 IDE 中大范围集成了 `terraform
    fmt` 命令。此外，使用这个 Terraform 插件，我们可以在每次代码提交时执行 `terraform fmt` 命令并整理代码，如下图所示：
- en: '![](img/0df18552-6da3-4b9b-94a0-5e7e82113586.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0df18552-6da3-4b9b-94a0-5e7e82113586.png)'
- en: For more information on the Save action plugin, refer to [https://plugins.jetbrains.com/plugin/7642-save-actions](https://plugins.jetbrains.com/plugin/7642-save-actions)
    and for the Terraform plugin, refer to [https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support](https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Save action插件的更多信息，请参考[https://plugins.jetbrains.com/plugin/7642-save-actions](https://plugins.jetbrains.com/plugin/7642-save-actions)，有关Terraform插件的信息，请参考[https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support](https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support)。
- en: 'For Git commits, it''s possible to automate the execution of the `terraform
    fmt` command before each commit by using pre-commits that are hooks to Git: [https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Git提交，可以通过使用Git的预提交钩子，自动执行每次提交前的`terraform fmt`命令：[https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。
- en: 'To use pre-commits with Terraform, refer to this list of hooks provided by
    *Gruntwork*: [https://github.com/gruntwork-io/pre-commit](https://github.com/gruntwork-io/pre-commit.).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Terraform中使用预提交，请参阅*Gruntwork*提供的钩子列表：[https://github.com/gruntwork-io/pre-commit](https://github.com/gruntwork-io/pre-commit)。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The complete `terraform fmt` command documentation is available here: [https://www.terraform.io/docs/commands/fmt.html](https://www.terraform.io/docs/commands/fmt.html).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`terraform fmt`命令文档可以在此处找到：[https://www.terraform.io/docs/commands/fmt.html](https://www.terraform.io/docs/commands/fmt.html)。
- en: Validating the code syntax
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证代码语法
- en: When writing a Terraform configuration, it is important to be able to validate
    the syntax of the code we are writing before executing it, or even before archiving
    it in a Git repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Terraform配置时，重要的是能够在执行代码之前，甚至在将代码存档到Git仓库之前验证我们编写的代码语法。
- en: We will see in this recipe how, by using the Terraform client tool, we can check
    the syntax of a Terraform configuration.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将展示如何使用Terraform客户端工具检查Terraform配置的语法。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will start with the following Terraform configuration,
    which is written in a `main.tf` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此教程，我们将从以下Terraform配置开始，该配置写在`main.tf`文件中：
- en: '![](img/783a84c0-e179-4f74-a564-ddebe7b28292.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/783a84c0-e179-4f74-a564-ddebe7b28292.png)'
- en: What we notice in the preceding code is that the declaration of the `environment`
    variable is missing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中注意到，`environment`变量的声明缺失。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To validate our Terraform configuration syntax, perform the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证我们的Terraform配置语法，请执行以下步骤：
- en: 'To start, initialize the Terraform context by running the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令初始化Terraform上下文：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, validate the code by executing the `validate` command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过执行`validate`命令来验证代码：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we initialize the Terraform context by executing the `terraform
    init` command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们通过执行`terraform init`命令来初始化Terraform上下文。
- en: Then, we perform a check of the code validity by executing the `terraform validate`
    command.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过执行`terraform validate`命令来检查代码的有效性。
- en: 'At the end of the execution of this command, we get the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行此命令的末尾，我们得到以下输出：
- en: '![](img/578a737b-e1c6-4be0-a94c-41d563a15810.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/578a737b-e1c6-4be0-a94c-41d563a15810.png)'
- en: We see that there is one syntax error in the Terraform configuration, which
    indicates that we call the variable `var.environment`, which has not been declared.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到Terraform配置中存在一个语法错误，提示我们调用了未声明的变量`var.environment`。
- en: 'So, we correct the code and run the `terraform validate` command again until
    we have no more errors, as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们修正代码并再次运行`terraform validate`命令，直到没有更多错误，如下截图所示：
- en: '![](img/b3b32978-0324-438a-889c-343cfa51fc81.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3b32978-0324-438a-889c-343cfa51fc81.png)'
- en: The output shows us that the Terraform configuration is valid.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果显示Terraform配置有效。
- en: There's more…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: This validation command is useful in local development mode, but also in code
    integration in a **continuous integration** (**CI**) pipeline, so as to not execute
    the `terraform plan` command if the `terraform validate` command returns syntax
    errors.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个验证命令在本地开发模式中非常有用，也可以用于代码集成中的**持续集成**（**CI**）流水线中，这样在`terraform validate`命令返回语法错误时，就不会执行`terraform
    plan`命令。
- en: 'The following PowerShell code shows an example of return code following the
    execution of this command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PowerShell代码示例，显示了执行此命令后的返回代码：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The PowerShell variable, `$LASTEXITCODE`, which is native to PowerShell, will
    return `0` if there is no error, otherwise `1` if there is an error.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 变量 `$LASTEXITCODE`，这是 PowerShell 的本地变量，如果没有错误，它将返回 `0`，如果有错误则返回 `1`。
- en: 'It is also possible to get the output of this command in JSON format by adding
    the `-json` option to this command, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过向此命令添加 `-json` 选项，以 JSON 格式获取该命令的输出，如下图所示：
- en: '![](img/9daeb7f4-ade6-45cb-8a19-4874d2557443.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9daeb7f4-ade6-45cb-8a19-4874d2557443.png)'
- en: The JSON result can then be parsed with third-party tools such as **jq** and
    used in your workflow.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，JSON 结果可以使用第三方工具如 **jq** 进行解析，并在工作流中使用。
- en: Be careful, however. This command only allows validation of the syntax of the
    configuration with, for example, the correct use of functions, variables, and
    object types, and not validation of the execution of the result of the Terraform
    configuration.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而需要注意的是，这个命令仅允许验证配置的语法，例如正确使用函数、变量和对象类型，而不是验证 Terraform 配置执行的结果。
- en: If the Terraform configuration contains a `backend` block, then, for this validation
    of the configuration, we don't need to connect to this state file. We can add
    the `-backend=false` option to the `terraform init` command.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Terraform 配置中包含 `backend` 块，那么在验证该配置时，我们不需要连接到该状态文件。我们可以在 `terraform init`
    命令中添加 `-backend=false` 选项。
- en: Finally, if the execution of this Terraform configuration requires variables
    passed with the `-var` argument, or with the `-var-file` option, you cannot use
    this command. Instead, use the `terraform plan` command, which performs validation
    during its execution.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果执行此 Terraform 配置时需要通过 `-var` 参数或 `-var-file` 选项传递变量，则无法使用此命令。相反，使用 `terraform
    plan` 命令，该命令在执行过程中会进行验证。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The `terraform validate` command documentation is available here: [https://www.terraform.io/docs/commands/validate.html](https://www.terraform.io/docs/commands/validate.html)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`terraform validate` 命令的文档可以在这里查看: [https://www.terraform.io/docs/commands/validate.html](https://www.terraform.io/docs/commands/validate.html)'
- en: Destroying infrastructure resources
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销毁基础设施资源
- en: As we have said many times in this book, IaC allows the rapid provisioning of
    infrastructure.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书中多次提到的，基础设施即代码（IaC）允许快速配置基础设施。
- en: Another advantage of IaC is that it allows a quick build and the cleaning up
    of resources that have been provisioned.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 的另一个优点是它可以快速构建并清理已配置的资源。
- en: 'Indeed, we may need to clean up an infrastructure for different reasons. Here
    are a few examples:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可能需要因不同原因清理基础设施。以下是一些示例：
- en: We destroy an infrastructure with a view to rebuild it better in accordance
    with new specifications.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们销毁基础设施是为了根据新的规格重新构建它，使其更好。
- en: We provide an infrastructure that is called on demand, which means it is temporary
    for a specific need (such as to test a new feature or a new branch of the application).
    And this infrastructure must be capable of being built and destroyed quickly and
    automatically.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供的是按需调用的基础设施，这意味着它是为特定需求（例如测试新特性或新分支）而临时搭建的。并且该基础设施必须能够快速、自动地构建和销毁。
- en: We want to remove an unused infrastructure and, at the same time, no longer
    pay for it.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望移除一个不再使用的基础设施，并同时停止为其付费。
- en: In this recipe, we will discuss how to destroy an infrastructure that has been
    provisioned with Terraform.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将讨论如何销毁已通过 Terraform 配置的基础设施。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, we are going to provide an infrastructure in Azure that is composed
    of an Azure App Service.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们将提供一个由 Azure App Service 组成的基础设施。
- en: 'For this we use the Terraform configuration, which can be found here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '为此，我们使用的 Terraform 配置可以在这里找到: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app)'
- en: 'Then, to provision it, we execute the basic Terraform workflow with the following
    commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了配置它，我们执行以下基本的 Terraform 工作流命令：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the end of its execution, we have a Resource Group, a Service Plan, an App
    Service, and an Application Insights resource in Azure.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行结束时，我们将在 Azure 中得到一个资源组、一个服务计划、一个应用服务和一个应用洞察资源。
- en: The goal of this recipe is to completely destroy this infrastructure using Terraform
    commands.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的目标是通过 Terraform 命令完全销毁此基础设施。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'For clean resources with Terraform, perform the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Terraform清理资源，请执行以下步骤：
- en: 'To start, initialize the Terraform context by running the `init` command:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过运行`init`命令初始化Terraform上下文：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, to clean the resources, we execute the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了清理资源，我们执行以下命令：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the beginning of its execution, this command displays all resources that
    will be destroyed and asks for confirmation to delete the resources. Validation
    is then confirmed by typing the word `yes`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行的开始，此命令会显示所有将被销毁的资源，并要求确认删除资源。然后通过输入`yes`来确认验证。
- en: How it works…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 2*, we are destroying all the provisioned resources by executing the
    `terraform destroy` command.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们通过执行`terraform destroy`命令来销毁所有已配置的资源。
- en: 'The following screenshot shows the extracted output of this command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了该命令的提取输出：
- en: '![](img/6a994fb5-d844-4078-a913-a71f6bdb2de5.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a994fb5-d844-4078-a913-a71f6bdb2de5.png)'
- en: At the end of the command execution, Terraform reports that the resources have
    been successfully destroyed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令执行结束时，Terraform报告资源已成功销毁。
- en: There's more…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: In this recipe, we have studied how to destroy all the resources that have been
    described and provisioned with a Terraform configuration.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们研究了如何销毁所有已描述并由Terraform配置提供的资源。
- en: Since the `terraform destroy` command deletes all the resources tracked in the Terraform
    state file, it is important to break the Terraform configuration by separating
    it into multiple state files to reduce the room for error when changing the infrastructure.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`terraform destroy`命令会删除Terraform状态文件中跟踪的所有资源，因此重要的是通过将Terraform配置拆分为多个状态文件来减少更改基础设施时发生错误的可能性。
- en: 'If you need to destroy a single resource and not all the resources tracked
    in the state file, you can add the `-target` option to the `terraform destroy`
    command, which allows you to target the resource to be deleted. The following
    is an example of this command with the `target` option:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要销毁一个单独的资源，而不是销毁状态文件中跟踪的所有资源，可以将`-target`选项添加到`terraform destroy`命令中，允许您指定要删除的资源。以下是带有`target`选项的命令示例：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this example, only the Application Insights resource is destroyed. For more
    details, read the pertinent documentation here: [https://www.terraform.io/docs/commands/plan.html#resource-targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，仅销毁了Application Insights资源。更多详细信息，请在此查看相关文档：[https://www.terraform.io/docs/commands/plan.html#resource-targeting](https://www.terraform.io/docs/commands/plan.html#resource-targeting)
- en: Note that the targeting mechanism should only be used as a last resort. In an
    ideal scenario, the configuration stays in sync with the state file (as applied
    without any extra `target` flags). The risk of executing a targeted apply or destroy
    operation is that other contributors may miss the context and, more importantly,
    it becomes much more difficult to apply further changes after changing the configuration.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，定位机制应仅在最后手段下使用。在理想情况下，配置应与状态文件保持同步（应用时不带任何额外的`target`标志）。执行目标应用或销毁操作的风险在于，其他贡献者可能会错过上下文，更重要的是，在更改配置后，进行进一步更改将变得更加困难。
- en: In addition, if the `terraform plan` command in this Terraform configuration
    requires the `-var-file` option to specify or override values to the variables,
    then the same options must also be added to the `terraform destroy` command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果此Terraform配置中的`terraform plan`命令需要`-var-file`选项来指定或覆盖变量的值，则必须在`terraform
    destroy`命令中也添加相同的选项。
- en: In most cases, all options that apply to the `terraform plan` command also apply
    to the `terraform destroy` command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，适用于`terraform plan`命令的所有选项也适用于`terraform destroy`命令。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The documentation pertaining to the `terraform destroy` command is available
    here: [https://www.terraform.io/docs/commands/destroy.html](https://www.terraform.io/docs/commands/destroy.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`terraform destroy`命令相关的文档可以在这里查看：[https://www.terraform.io/docs/commands/destroy.html](https://www.terraform.io/docs/commands/destroy.html)
- en: 'The documentation pertaining to addressing the resource target is available
    here: [https://www.terraform.io/docs/internals/resource-addressing.html](https://www.terraform.io/docs/internals/resource-addressing.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与资源定位相关的文档可以在这里查看：[https://www.terraform.io/docs/internals/resource-addressing.html](https://www.terraform.io/docs/internals/resource-addressing.html)
- en: Using workspaces for managing environments
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工作区来管理环境
- en: In Terraform, there is the concept of **workspaces**, which enables the same
    Terraform configuration to be used in order to build multiple environments.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 中，有 **工作区** 的概念，允许使用相同的 Terraform 配置来构建多个环境。
- en: Each of these configurations will be written to a different Terraform state file
    and will thus be isolated from the other configurations. Workspaces can be used
    to create several environments of our infrastructure.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 每个配置将写入不同的 Terraform 状态文件，因此会与其他配置隔离开。工作区可以用来创建多个基础设施环境。
- en: In this recipe, we will study the use of Terraform workspaces in the Terraform
    configuration, with the execution of Terraform commands.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中，我们将研究在 Terraform 配置中使用 Terraform 工作区，并执行 Terraform 命令。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The purpose of this recipe is for an application to create a Resource Group
    for each of its environments (`dev` and `prod`).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目的是让一个应用程序为它的每个环境（`dev` 和 `prod`）创建一个资源组。
- en: Regarding the Terraform configuration, no prerequisites are necessary. We will
    see it in the steps of the recipe.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Terraform 配置，没有必要的前提条件。我们将在步骤中看到它。
- en: 'The Terraform configuration for this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/workspaces](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/workspaces)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的 Terraform 配置可以在此查看：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/workspaces](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/workspaces)
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To manage a Terraform workspace, perform the following steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理 Terraform 工作区，请执行以下步骤：
- en: 'In a new `main.tf` file, we write the following Terraform configuration:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 `main.tf` 文件中，我们编写以下 Terraform 配置：
- en: '[PRE8]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In a command terminal, we navigate into the folder that contains this Terraform
    configuration and execute the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令终端中，我们进入包含此 Terraform 配置的文件夹，并执行以下命令：
- en: '[PRE9]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To provision the `dev` environment, we run the basic commands of the Terraform
    workflow, which are as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置 `dev` 环境，我们运行 Terraform 工作流的基本命令，具体如下：
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we execute the `workspace new` command with the name of the production
    workspace to be created:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们执行 `workspace new` 命令，创建生产工作区，命名为 `prod`：
- en: '[PRE11]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To finish and provision the `prod` environment, we execute the basic commands
    of the Terraform workflow production, which are as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成并配置 `prod` 环境，我们执行 Terraform 工作流生产的基本命令，具体如下：
- en: '[PRE12]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, in the Terraform configuration we wrote, we provide a Resource
    Group in Azure that will have a name composed of an `RG-APP` prefix and a dynamic
    suffix, `terraform.workspace`, which will be the name of the workspace we are
    going to create.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们在 Terraform 配置中提供了一个 Azure 资源组，它的名称由 `RG-APP` 前缀和动态后缀 `terraform.workspace`
    组成，后缀将是我们即将创建的工作区的名称。
- en: In *step 2*, we create the workspace that corresponds to the `dev` environment,
    and for this we use the `terraform workspace new` command followed by the workspace
    name (in this case, `dev`).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们创建与 `dev` 环境对应的工作区，为此我们使用 `terraform workspace new` 命令，后跟工作区名称（在本例中为
    `dev`）。
- en: 'Once created, Terraform is automatically placed in this workspace, as you can
    see in the following screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，Terraform 会自动将其放入该工作区，如下图所示：
- en: '![](img/ccda3ae2-3ba8-47ca-ba3b-2a30fd1cd789.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ccda3ae2-3ba8-47ca-ba3b-2a30fd1cd789.png)'
- en: After we've created the workspace, we just execute the basic commands of the
    Terraform workflow, which we do in *step 3*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工作区后，我们只需执行 Terraform 工作流的基本命令，这些命令在 *步骤 3* 中执行。
- en: Note that here we have added the `-out` option to the `terraform plan` command
    to save the result of the plan in the `outdev.tfplan` file. Then, to apply the
    changes, we specifically add this file as an argument to the `terraform apply`
    command.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们已经在 `terraform plan` 命令中添加了 `-out` 选项，以将计划的结果保存在 `outdev.tfplan` 文件中。然后，为了应用这些更改，我们特别将此文件作为参数添加到
    `terraform apply` 命令中。
- en: Then, to provision the `prod` environment, we repeat exactly the same *steps
    2* and *3*, but this time creating a workspace called `prod`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了配置 `prod` 环境，我们完全按照 *步骤 2* 和 *步骤 3* 进行，但这次创建名为 `prod` 的工作区。
- en: 'At the end of the execution of all these steps, we can see in the Azure portal
    that we have our two Resource Groups that contain in the suffix the name of their
    workspace, as you can see in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行完所有这些步骤后，我们可以在 Azure 门户中看到，我们有两个资源组，它们在后缀中包含了工作区的名称，如下图所示：
- en: '![](img/3fd1d118-f30b-4462-a496-0c947eea9842.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fd1d118-f30b-4462-a496-0c947eea9842.png)'
- en: 'In addition, we also notice two Terraform state files, one for each workspace,
    which were created automatically, as shown in the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还注意到创建了两个 Terraform 状态文件，每个工作空间一个，它们是自动创建的，如下图所示：
- en: '![](img/ff0cf20e-0607-400f-92a5-a87dd02d6544.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff0cf20e-0607-400f-92a5-a87dd02d6544.png)'
- en: In this screenshot, we can see two `terraform.tfstate` files, one in the `dev`
    directory and another in the `prod` directory.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张截图中，我们可以看到两个`terraform.tfstate`文件，一个位于`dev`目录，另一个位于`prod`目录。
- en: There's more…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In any Terraform configuration execution, there is a default workspace that
    only names `default`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何 Terraform 配置执行中，都有一个默认的工作空间，名称为`default`。
- en: 'It is possible to see the list of workspaces in our code by executing the following
    command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令查看我们代码中的工作空间列表：
- en: '[PRE13]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the execution of this command in the case of
    our recipe:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在我们的案例中执行此命令的过程：
- en: '![](img/2e749ef2-3ea1-4198-aae7-65c914672b05.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e749ef2-3ea1-4198-aae7-65c914672b05.png)'
- en: We can clearly see our `dev` and `prod` workspace, and that the current workspace
    is `prod` (marked with an `*` in front of its name).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清晰地看到我们的`dev`和`prod`工作空间，并且当前的工作空间是`prod`（在其名称前标有`*`）。
- en: 'If you want to switch to another workspace, execute the `terraform workspace
    select` command, followed by the name of the workspace to be selected; for example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想切换到另一个工作空间，请执行`terraform workspace select`命令，后面跟上要选择的工作空间名称；例如：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, you can also delete a workspace by executing the `terraform workspace
    delete` command, followed by the name of the workspace to be deleted; for example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还可以通过执行`terraform workspace delete`命令删除一个工作空间，后面跟上要删除的工作空间名称；例如：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Be careful when deleting a workspace that it does not delete the associated
    resources. That's why, in order to delete a workspace, you must first delete the
    resources provided by that workspace using the `terraform destroy` command. Otherwise,
    if this operation is not carried out, it will no longer be possible to manage
    these resources with Terraform because the Terraform state file of this workspace
    will have been deleted.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除工作空间时要小心，确保它不会删除关联的资源。因此，为了删除工作空间，您必须先使用`terraform destroy`命令删除该工作空间提供的资源。否则，如果未执行此操作，您将无法使用
    Terraform 管理这些资源，因为该工作空间的 Terraform 状态文件将被删除。
- en: 'In addition, by default, it is not possible to delete a workspace whose state
    file is not empty. However, we can force the destruction of this workspace by
    adding the `-force` option to the `terraform workspace delete -force` command, as
    documented here: [https://www.terraform.io/docs/commands/workspace/delete.html](https://www.terraform.io/docs/commands/workspace/delete.html).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，默认情况下，不可能删除状态文件非空的工作空间。但是，我们可以通过在`terraform workspace delete -force`命令中添加`-force`选项，强制销毁该工作空间，相关文档请见：[https://www.terraform.io/docs/commands/workspace/delete.html](https://www.terraform.io/docs/commands/workspace/delete.html)。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The general documentation for workspaces is available here: [https://www.terraform.io/docs/state/workspaces.html](https://www.terraform.io/docs/state/workspaces.html)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作空间的一般文档可以在这里找到：[https://www.terraform.io/docs/state/workspaces.html](https://www.terraform.io/docs/state/workspaces.html)
- en: 'The CLI documentation for the `terraform workspace` command is available here:
    [https://www.terraform.io/docs/commands/workspace/index.html](https://www.terraform.io/docs/commands/workspace/index.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform workspace`命令的 CLI 文档可以在这里找到：[https://www.terraform.io/docs/commands/workspace/index.html](https://www.terraform.io/docs/commands/workspace/index.html)'
- en: 'Read this blog post for a more complete use of workspaces: [https://www.colinsalmcorner.com/terraform-all-the-things-with-vsts/](https://www.colinsalmcorner.com/terraform-all-the-things-with-vsts/)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读这篇博客文章，了解更多关于工作空间的完整使用方法：[https://www.colinsalmcorner.com/terraform-all-the-things-with-vsts/](https://www.colinsalmcorner.com/terraform-all-the-things-with-vsts/)
- en: Importing existing resources
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入现有资源
- en: So far in this book, we have seen the normal use of Terraform, which is to write
    a Terraform configuration that is going to be executed and applied by Terraform.
    This execution will provision or apply changes to an infrastructure that will
    be reflected in the Terraform state file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，我们已经看到了 Terraform 的正常使用方法，即编写 Terraform 配置并由 Terraform 执行和应用。此执行将配置或应用对基础设施的更改，并会反映在
    Terraform 状态文件中。
- en: 'In certain scenarios, however, it may be necessary to import resources that
    have already been provisioned into the Terraform state file. Examples of such
    scenarios include the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些场景中，可能需要将已经配置好的资源导入到 Terraform 状态文件中。这类场景的例子包括：
- en: Resources have been provisioned manually (or by scripts) and now it is desired
    that their configuration is in the Terraform configuration and in the state file.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源已经手动（或通过脚本）配置好，现在希望它们的配置出现在 Terraform 配置文件和状态文件中。
- en: A Terraform state file that contains the configuration of an infrastructure
    has been corrupted or deleted and regeneration is desirable.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包含基础设施配置的 Terraform 状态文件已损坏或丢失，且需要重新生成，可以采取此步骤。
- en: In this recipe, we will discuss how, with the assistance of Terraform commands,
    we can import the configuration of resources that have already been provisioned
    into the Terraform state file.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讨论如何借助 Terraform 命令，将已经配置好的资源导入到 Terraform 状态文件中。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will use the following Terraform configuration, which we
    have already written, in order to provision a Resource Group:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用我们已经编写的以下 Terraform 配置，以便为资源组进行配置：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This code is also available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/import](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/import)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码也可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/import](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/import)
- en: 'Also, in the Azure portal, we have created this Resource Group called `RG-APP-IMPORT`
    manually, as explained in the pertinent documentation: [https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在 Azure 门户中，我们已手动创建了名为`RG-APP-IMPORT`的资源组，如相关文档中所述：[https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal)
- en: 'The following screenshot shows this Resource Group in Azure:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Azure 中的该资源组：
- en: '![](img/6a6e02a7-b2d7-4d33-b4e0-ba3725a77790.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a6e02a7-b2d7-4d33-b4e0-ba3725a77790.png)'
- en: 'At this point, if we run Terraform on this code, the `terraform apply` command
    will try to create this Resource Group. It will fail and return the error that
    the Resource Group already exists and cannot be created, as shown in the following
    screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果我们在此代码上运行 Terraform，`terraform apply`命令将尝试创建此资源组。它会失败并返回错误，提示资源组已经存在，无法创建，如下截图所示：
- en: '![](img/8e5454a5-f419-4ab8-a1c4-3b7c5f886dda.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e5454a5-f419-4ab8-a1c4-3b7c5f886dda.png)'
- en: It is therefore necessary to use a resource import directly in the Terraform
    state file.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有必要直接在 Terraform 状态文件中使用资源导入。
- en: In this recipe, we will perform an import operation with one Resource Group
    in Azure. But it is important to note that each Terraform provider has different
    target parameters for the `import` command.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将执行一个导入操作，将一个资源组导入到 Azure 中。但需要注意的是，每个 Terraform 提供者对`import`命令有不同的目标参数。
- en: The goal of this recipe is to import the configuration of this Resource Group
    in the Terraform state file corresponding to our Terraform configuration.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是将该资源组的配置导入到与我们的 Terraform 配置相对应的 Terraform 状态文件中。
- en: How to do it…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'We initialize the Terraform context by executing the `init` command:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过执行`init`命令初始化 Terraform 环境：
- en: '[PRE17]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we execute the `terraform import` command as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们执行以下`terraform import`命令：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, the Terraform context is initialized with the `terraform init` command.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，使用`terraform init`命令初始化 Terraform 环境。
- en: Then, in *step 2*, we execute the `terraform import` command, which takes the
    reference of the Terraform resource as the first parameter and the Azure identifier
    of the Resource Group as the second parameter.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在*步骤 2*中，我们执行`terraform import`命令，将 Terraform 资源的引用作为第一个参数，Azure 中资源组的标识符作为第二个参数。
- en: 'The following screenshot shows the output of the execution of this command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了执行此命令的输出结果：
- en: '![](img/29adb1ae-4057-41bb-9a35-5b81f359fd5f.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29adb1ae-4057-41bb-9a35-5b81f359fd5f.png)'
- en: We can see that the resource was indeed imported into the Terraform state file.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到资源确实已被导入到 Terraform 状态文件中。
- en: We now have the Terraform configuration, the Terraform state file, and the resources
    in Azure up to date.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check the execution of the resource import, we execute the `terraform plan`
    command and we have to have a situation where no changes are required, as can
    be seen in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0478c8c-f7ce-42ba-9fbd-dcc9a4c924a8.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: If you are provisioning resources in Azure, there are rather interesting tools
    that generate the Terraform configuration and the corresponding Terraform state file
    from Azure resources that have already been created. This open source **Az2Tf**
    tool is available at [https://github.com/andyt530/py-az2tf](https://github.com/andyt530/py-az2tf).
    Alternatively, there is **TerraCognita**, which is available at [https://github.com/cycloidio/terracognita/blob/master/README.md](https://github.com/cycloidio/terracognita/blob/master/README.md).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The documentation pertaining to the `import` command is available here: [https://www.terraform.io/docs/commands/import.html](https://www.terraform.io/docs/commands/import.html)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Exporting the output in JSON
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed in the *Looping over object collections* recipe of [Chapter 3](d019fed0-6c22-4da8-9796-58d45feafa2c.xhtml),
    *Building Dynamic Environments with Terraform*, the use of Terraform's outputs
    that allow you to have output values for the execution of the Terraform configuration.
    Indeed, we have seen how to declare an output in the Terraform configuration,
    and we learned that these outputs and their values were displayed at the end of
    the execution of the `terraform apply` command.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of these outputs is that they can be retrieved by a program and
    thus be used for another operation; for example, in a CI/CD pipeline.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how the values of the outputs can be retrieved in
    JSON format so that they can be used in an external program.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will use only the Terraform configuration that we studied
    in [Chapter 3](d019fed0-6c22-4da8-9796-58d45feafa2c.xhtml), *Building Dynamic
    Environments with Terraform*, and whose sources can be found here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/list_map](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/list_map)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'In this code, we add another output that returns the list of App Service URLs
    as shown:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To exploit the values of the output, we need to use a tool that allows us to
    work on JSON. For this, you can use any framework and library according to your
    scripting languages. In this recipe, we will use **jq**, which is a free tool
    that allows you to easily manipulate JSON on the command line. The documentation
    on jq is available here [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this recipe is to provision two Azure App Services using Terraform
    configuration and then, with a script, perform a response check of the URL of
    the first App Service.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to use the output:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用输出结果：
- en: 'Execute the Terraform workflow with the following commands:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以运行 Terraform 工作流：
- en: '[PRE20]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, run the `terraform output` command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行 `terraform output` 命令：
- en: '[PRE21]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, to retrieve the URL of the created App Service, we execute the following
    command in the command terminal:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了获取创建的应用服务的 URL，我们在命令终端执行以下命令：
- en: '[PRE22]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we execute the basic commands of the Terraform workflow. After
    executing the `terraform apply` command, the command displays the output.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们执行 Terraform 工作流的基本命令。执行 `terraform apply` 命令后，命令会显示输出结果。
- en: 'Then, in *step 2*, we visualize the output of this Terraform configuration
    more clearly by executing the `terraform output` command, as shown in the following
    screenshot:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 *步骤 2* 中，我们通过执行 `terraform output` 命令来更清晰地查看此 Terraform 配置的输出，如下图所示：
- en: '![](img/a2306f84-2a90-4993-8b18-68bd678108cf.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2306f84-2a90-4993-8b18-68bd678108cf.png)'
- en: 'In the preceding screenshot, we can see that this command returns the two outputs
    declared in the code, which are as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们可以看到此命令返回了代码中声明的两个输出，它们如下：
- en: '`app_service_names`: This returns a list of App Service names provided.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_service_names`：返回提供的应用服务名称列表。'
- en: '`app_service_urls`: This returns a list of the URLs of provisioned App Services.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app_service_urls`：返回已配置应用服务的 URL 列表。'
- en: 'Finally, in *step 3*, we run a script that checks the URL of the `webappdemobook1` App
    Service. In the first line of this script, we execute the `terraform output -json`
    command, which enables the result of the output to be returned in JSON format,
    as you can see in the following screenshot:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *步骤 3* 中，我们运行一个脚本来检查 `webappdemobook1` 应用服务的 URL。在此脚本的第一行，我们执行 `terraform
    output -json` 命令，这样输出结果会以 JSON 格式返回，正如下面的截图所示：
- en: '![](img/b346db5e-0c06-4f63-b832-84082452c66d.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b346db5e-0c06-4f63-b832-84082452c66d.png)'
- en: Then, with this result in JSON, we use the **jq** tool on it by retrieving the
    URL of the `webappdemobook1` App Service. The returned URL is put in a variable
    called `urlwebapp1`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用这个 JSON 结果，我们通过获取 `webappdemobook1` 应用服务的 URL 来使用 **jq** 工具。返回的 URL 被存储在一个名为
    `urlwebapp1` 的变量中。
- en: Then, in the second line of this script, we use the `curl` command on this URL
    by passing options to return only the HTTP header of this URL.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在此脚本的第二行，我们通过传递选项使用 `curl` 命令对这个 URL 进行操作，返回该 URL 的 HTTP 头信息。
- en: 'The result of the execution of this script is shown in the following screenshot:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此脚本的结果显示在以下截图中：
- en: '![](img/2aee7893-7dcd-45e0-9d0a-ef97c73b36ff.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aee7893-7dcd-45e0-9d0a-ef97c73b36ff.png)'
- en: You can see that the result of the check is `OK`, with a status code of `200`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到检查结果为 `OK`，状态码为 `200`。
- en: There's more…
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In this recipe, we learned how to retrieve all the outputs of a Terraform configuration.
    It is also possible to retrieve the value of a particular output by executing
    the `terraform output <output name>` command.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们学习了如何获取 Terraform 配置的所有输出。也可以通过执行 `terraform output <输出名称>` 命令来获取特定输出的值。
- en: 'In our case, we could have executed the `app_service_urls` command to display
    the value of the output:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们本可以执行 `app_service_urls` 命令来显示输出的值：
- en: '[PRE23]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following screenshot shows the execution of this command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这个命令的执行情况：
- en: '![](img/69cecede-2901-4166-8eba-3f7d2edf43e9.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69cecede-2901-4166-8eba-3f7d2edf43e9.png)'
- en: 'Then, we would run the following command to check the URL:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们运行以下命令来检查 URL：
- en: '[PRE24]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We see in this script that the command used is `terraform output app_service_urls
    -json`, which is more simplistic than `$(terraform output -json | jq -r .app_service_urls.value.webappdemobook1)`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个脚本中看到，使用的命令是 `terraform output app_service_urls -json`，比 `$(terraform output
    -json | jq -r .app_service_urls.value.webappdemobook1)` 更简洁。
- en: See also
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The `terraform output` command documentation is available here: [https://www.terraform.io/docs/commands/output.html](https://www.terraform.io/docs/commands/output.html)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform output` 命令的文档可以在这里找到：[https://www.terraform.io/docs/commands/output.html](https://www.terraform.io/docs/commands/output.html)'
- en: 'jq''s website can be found here: [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jq 的官网可以在这里找到：[https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)
- en: Tainting resources
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 污点资源
- en: Earlier, in the *Destroying infrastructure resources* recipe, we learned how
    to destroy resources that have been provisioned with Terraform.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，在 *销毁基础设施资源* 章节中，我们学习了如何销毁通过 Terraform 配置的资源。
- en: However, in certain situations, you may need to destroy a particular resource
    in order to rebuild it immediately. Examples of such situations may include modifications
    that have been made manually on that resource.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，你可能需要销毁特定的资源，以便立即重新创建它。此类情况的示例可能包括该资源已手动修改。
- en: To destroy and rebuild a resource, you could perform the `terraform destroy
    -target <resource>` command, followed by the `apply` command. However, the problem
    is that between the `destroy` and `apply` commands, there may be other changes
    in the Terraform configuration that will be applied that are not desired.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要销毁并重新创建一个资源，你可以执行 `terraform destroy -target <resource>` 命令，然后执行 `apply` 命令。然而，问题在于，在
    `destroy` 和 `apply` 命令之间，Terraform 配置中可能会有其他变更被应用，而这些变更是我们不希望有的。
- en: So, in this recipe, we will see how to perform this operation using the Terraform
    notion of tainting.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本教程中，我们将展示如何使用 Terraform 的 taint 概念来执行此操作。
- en: Getting ready
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在准备中
- en: In order to apply this recipe, we have first provisioned the infrastructure
    composed of a Resource Group, a Service Plan, an App Service, and an Application
    Insights resource. The Terraform configuration used for this provisioning can
    be found here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应用本教程，我们首先提供了由资源组、服务计划、App Service 和应用洞察资源组成的基础设施。用于此提供的 Terraform 配置可以在此找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app)。
- en: The goal of this recipe is to destroy and then rebuild the App Service in a
    single operation using the `taint` command of Terraform.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是通过使用 Terraform 的 `taint` 命令，在一次操作中销毁并重新创建 App Service。
- en: How to do it…
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To apply the `taint` operation, perform the following steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用 `taint` 操作，请执行以下步骤：
- en: Run the `terraform init` command to initialize the context.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `terraform init` 命令来初始化上下文。
- en: 'Then, execute the `terraform taint` command to flag the resource as *tainted*:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，执行 `terraform taint` 命令将该资源标记为*受污染*：
- en: '[PRE25]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, to rebuild the App Service, execute the following command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要重新创建 App Service，请执行以下命令：
- en: '[PRE26]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In *step 1*, we execute the `terraform init` command to initialize the context.
    Then, in *step 2*, we execute the `terraform taint` command to flag the `azurerm_app_service.app`
    resource as tainted; that is, to be destroyed and rebuilt.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 1 步*中，我们执行 `terraform init` 命令来初始化上下文。然后，在*第 2 步*中，我们执行 `terraform taint`
    命令，将 `azurerm_app_service.app` 资源标记为受污染；即，标记为销毁并重新创建。
- en: This command does not affect the resource itself, but only marks it as tainted
    in the Terraform state file.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令不会影响资源本身，而只是将其标记为在 Terraform 状态文件中受污染。
- en: 'The following screenshot shows the result of the `taint` command:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`taint`命令的结果：
- en: '![](img/4ce81d8d-4958-4a7b-a8ba-6961c6f963f5.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ce81d8d-4958-4a7b-a8ba-6961c6f963f5.png)'
- en: 'Finally, in *step 3*, we execute the `terraform apply` command and, when it
    is executed, we can see that Terraform will delete and then recreate the Azure
    App Service, as shown in the following screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*第 3 步*中，我们执行 `terraform apply` 命令，执行后可以看到 Terraform 将删除并重新创建 Azure App
    Service，如下图所示：
- en: '![](img/f305383a-c0ba-4eb6-9fd5-460451b2046b.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f305383a-c0ba-4eb6-9fd5-460451b2046b.png)'
- en: We can see in the preceding screenshot that Terraform destroys the App Service
    resource and then recreates it.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的截图中看到，Terraform 销毁了 App Service 资源，并且重新创建了它。
- en: There's more…
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'To go further, we can display in the terminal the status of this resource flagged
    in the Terraform state file by executing the `terraform state show` command, which
    displays the contents of the state file in the command terminal (documented here: [https://www.terraform.io/docs/commands/state/show.html](https://www.terraform.io/docs/commands/state/show.html))
    as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步查看，我们可以通过执行 `terraform state show` 命令，在终端显示该资源在 Terraform 状态文件中的标记状态，该命令将在命令终端显示状态文件的内容（文档链接：[https://www.terraform.io/docs/commands/state/show.html](https://www.terraform.io/docs/commands/state/show.html)），如下所示：
- en: '[PRE27]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following screenshot shows the result of this command:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此命令的结果：
- en: '![](img/6e21ebdd-972c-4e33-8d09-8271bc5aa1c8.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e21ebdd-972c-4e33-8d09-8271bc5aa1c8.png)'
- en: We can see that the resource App Service has the flag `tainted`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到资源 App Service 已被标记为 `tainted`。
- en: 'We have used the `terraform state` command to display the contents of the state,
    since it is strongly discouraged to read and modify the state file manually, as
    documented here: [https://www.terraform.io/docs/state/index.html#inspection-and-modification](https://www.terraform.io/docs/state/index.html#inspection-and-modification)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已使用`terraform state`命令显示状态的内容，强烈建议不要手动读取和修改状态文件，详情请参阅此处：[https://www.terraform.io/docs/state/index.html#inspection-and-modification](https://www.terraform.io/docs/state/index.html#inspection-and-modification)
- en: 'Moreover, in order to cancel the taint flag applied with the `terraform taint`
    command, we can execute the inverse command, which is `terraform untaint`. This
    command can be executed like this:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了取消应用`terraform taint`命令的污点标志，我们可以执行反向命令`terraform untaint`。此命令可以这样执行：
- en: '[PRE28]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, if we execute the `terraform plan` command, we can see that there is
    no change, as shown in the following screenshot:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果我们执行`terraform plan`命令，可以看到没有变化，如下截图所示：
- en: '![](img/e8ec7081-f7ac-4c32-a25f-652d9e5ebb4d.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8ec7081-f7ac-4c32-a25f-652d9e5ebb4d.png)'
- en: We see in this screenshot that the `untaint` command has cancelled the effect
    of the `taint` command and, during the execution of the `plan` command, no changes
    will be applied to the infrastructure.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此截图中看到，`untaint`命令已取消了`taint`命令的效果，并且在执行`plan`命令期间，不会对基础设施应用任何更改。
- en: See also
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'The `terraform taint` command documentation is available here: [https://www.terraform.io/docs/commands/taint.html](https://www.terraform.io/docs/commands/taint.html)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform taint`命令的文档可在此处找到：[https://www.terraform.io/docs/commands/taint.html](https://www.terraform.io/docs/commands/taint.html)'
- en: 'The `terraform untaint` command documentation is available here: [https://www.terraform.io/docs/commands/untaint.html](https://www.terraform.io/docs/commands/untaint.html)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform untaint`命令的文档可在此处找到：[https://www.terraform.io/docs/commands/untaint.html](https://www.terraform.io/docs/commands/untaint.html)'
- en: 'The `terraform state` command documentation is available here: [https://www.terraform.io/docs/commands/state/index.html](https://www.terraform.io/docs/commands/state/index.html)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform state`命令的文档可在此处找到：[https://www.terraform.io/docs/commands/state/index.html](https://www.terraform.io/docs/commands/state/index.html)'
- en: 'An article that explains the `taint` and `untaint` commands really well can
    be found here: [https://www.devopsschool.com/blog/terraform-taint-and-untaint-explained-with-example-programs-and-tutorials/](https://www.devopsschool.com/blog/terraform-taint-and-untaint-explained-with-example-programs-and-tutorials/)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一篇很好地解释了`taint`和`untaint`命令的文章可以在此找到：[https://www.devopsschool.com/blog/terraform-taint-and-untaint-explained-with-example-programs-and-tutorials/](https://www.devopsschool.com/blog/terraform-taint-and-untaint-explained-with-example-programs-and-tutorials/)
- en: Generating the graph dependencies
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成依赖图
- en: One of the interesting features of Terraform is the ability to generate a dependency
    graph of the resource dependencies mentioned in the Terraform configuration.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform的一个有趣功能之一是能够生成资源依赖关系的依赖图，该依赖关系在Terraform配置中提到。
- en: In this recipe, we will see how to generate and visualize this dependency graph.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将看到如何生成和可视化此依赖图。
- en: Getting ready
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to use a third-party drawing generation tool called
    **Graphviz**, which is available for download at [https://graphviz.gitlab.io/download/](https://graphviz.gitlab.io/download/).
    You will need to download and install the package corresponding to your operating
    system.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们需要使用一个名为**Graphviz**的第三方绘图工具，可以在[https://graphviz.gitlab.io/download/](https://graphviz.gitlab.io/download/)下载。您需要下载并安装适合您操作系统的软件包。
- en: Moreover, as an example, we will take the Terraform configuration available
    at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app.](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，举例来说，我们将采用在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app)上提供的Terraform配置。
- en: How to do it…
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To generate the graph dependencies, perform the following steps:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成依赖图，请执行以下步骤：
- en: 'Execute the `terraform graph` command:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`terraform graph`命令：
- en: '[PRE29]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Open the file explorer and navigate inside the folder that contains the Terraform
    configuration and open the file called `graph.svg`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件资源管理器，进入包含Terraform配置文件的文件夹，并打开名为`graph.svg`的文件。
- en: How it works…
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In *step 1*, we will execute the `terraform graph` command. Then, we send the
    result of this graph command to the `dot` utility that was previously installed
    with Graphviz. This `dot` utility will generate a `graph.svg` file, which contains
    the graphical representation of the Terraform configuration.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们将执行 `terraform graph` 命令。然后，我们将此图形命令的结果发送到之前使用 Graphviz 安装的 `dot`
    工具。此 `dot` 工具将生成一个 `graph.svg` 文件，其中包含 Terraform 配置的图形表示。
- en: 'In *step 2*, we open the `graph.svg` file and we see the dependency graph as
    shown in the following diagram:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们打开 `graph.svg` 文件，并看到依赖图，如以下图所示：
- en: '![](img/c9a04354-3503-42be-8da6-33b7955c9243.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9a04354-3503-42be-8da6-33b7955c9243.png)'
- en: In the preceding diagram, we can see the dependencies between variables, resources,
    and the provider.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，我们可以看到变量、资源和提供者之间的依赖关系。
- en: See also
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The `terraform graph` command documentation is available here: [https://www.terraform.io/docs/commands/graph.html](https://www.terraform.io/docs/commands/graph.html)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform graph` 命令的文档可以在这里查看：[https://www.terraform.io/docs/commands/graph.html](https://www.terraform.io/docs/commands/graph.html)'
- en: 'Documentation relating to Graphviz is available here: [https://graphviz.gitlab.io/](https://graphviz.gitlab.io/)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Graphviz 的文档可以在这里找到：[https://graphviz.gitlab.io/](https://graphviz.gitlab.io/)
- en: 'An excellent video about the generation of graph dependencies can be found
    here: [https://techsnips.io/snips/how-to-use-graphviz-with-terraform-to-visualize-your-infrastructure/](https://techsnips.io/snips/how-to-use-graphviz-with-terraform-to-visualize-your-infrastructure/)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个关于生成图形依赖关系的优秀视频，您可以在这里找到：[https://techsnips.io/snips/how-to-use-graphviz-with-terraform-to-visualize-your-infrastructure/](https://techsnips.io/snips/how-to-use-graphviz-with-terraform-to-visualize-your-infrastructure/)
- en: Debugging the Terraform execution
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 Terraform 执行
- en: When we execute Terraform commands, the display output of the console is quite
    simple and clear.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行 Terraform 命令时，控制台的显示输出非常简单明了。
- en: In this recipe, we will study how to activate the debug mode in Terraform, which
    will allow us to display more information about its execution.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们将学习如何在 Terraform 中启用调试模式，这将帮助我们显示有关其执行的更多信息。
- en: Getting ready
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the Terraform configuration available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app.](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app.)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本指南，我们将使用位于 [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app.](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP04/sample-app.)
    的 Terraform 配置。
- en: Furthermore, for the purposes of this demonstration, we will run it on a Windows
    operating system, but the operation is exactly the same on other operating systems.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，出于本演示的目的，我们将在 Windows 操作系统上运行它，但在其他操作系统上的操作完全相同。
- en: How to do it…
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To activate the debug on Terraform, perform the following steps:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 Terraform 的调试模式，请执行以下步骤：
- en: 'In the PowerShell command-line terminal, execute the following command:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PowerShell 命令行终端中，执行以下命令：
- en: '[PRE30]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we can execute the Terraform workflow commands with display logs activated:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以执行 Terraform 工作流命令，并启用显示日志：
- en: '[PRE31]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In *step 1*, we create a Terraform environment variable, `TF_LOG`, which enables
    Terraform's verbose mode to be activated, indicating that we want to see all traces
    of Terraform's execution displayed.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了一个 Terraform 环境变量 `TF_LOG`，该变量启用 Terraform 的详细模式，表示我们希望看到 Terraform
    执行的所有跟踪信息。
- en: Here, in this recipe, we used the `$env` command to set this environment variable
    because we are working on Windows. You can, of course, do the same on other operating
    systems with the correct syntax.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇指南中，我们使用了 `$env` 命令来设置此环境变量，因为我们在 Windows 上工作。当然，您可以在其他操作系统上使用正确的语法执行相同的操作。
- en: 'Then, in *step 2*, we execute the commands of the Terraform workflow and we
    can see in the output all traces of this execution, as shown in the following
    screenshot:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 *步骤 2* 中，我们执行 Terraform 工作流命令，并可以在输出中看到该执行的所有跟踪，如以下截图所示：
- en: '![](img/f868b821-4860-4277-a9aa-f805e2031a1d.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f868b821-4860-4277-a9aa-f805e2031a1d.png)'
- en: In this screenshot, which is an extract of the execution of Terraform, you can
    see all the steps involved in the execution of Terraform.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张截图中，这是 Terraform 执行过程的摘录，您可以看到 Terraform 执行过程中的所有步骤。
- en: There's more…
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: Instead of having all these traces displayed in the console output, it is also
    possible to save them in a file.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以在控制台输出中显示所有这些跟踪信息，还可以将它们保存在一个文件中。
- en: To do this, just create a second environment variable, `TF_LOG_PATH`, which
    will contain as a value the path to the log file. Indeed, the logs are often very
    verbose and difficult to read on the console output. That's why we prefer that
    the output of the logs is written in a file that can be read more easily.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，只需创建第二个环境变量 `TF_LOG_PATH`，其值将是日志文件的路径。实际上，日志通常非常冗长，并且在控制台输出中很难阅读。因此，我们更倾向于将日志输出写入文件，以便更容易地阅读。
- en: 'Moreover, to disable these traces, the `TF_LOG` environment variable must be
    emptied by assigning it an empty value as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要禁用这些跟踪，必须通过将 `TF_LOG` 环境变量赋为空值来清空该变量，如下所示：
- en: '[PRE32]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The documentation on the Terraform debug is available here: [https://www.terraform.io/docs/internals/debugging.html](https://www.terraform.io/docs/internals/debugging.html)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Terraform 调试的文档可以在这里查看：[https://www.terraform.io/docs/internals/debugging.html](https://www.terraform.io/docs/internals/debugging.html)
- en: 'Documentation on Terraform''s environment variables is available here: [https://www.terraform.io/docs/commands/environment-variables.html](https://www.terraform.io/docs/commands/environment-variables.html)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Terraform 环境变量的文档可以在这里查看：[https://www.terraform.io/docs/commands/environment-variables.html](https://www.terraform.io/docs/commands/environment-variables.html)
