["```\nvariable \"resource_group_name\" {\n  description = \"Resource group name\"\n}\n\nvariable \"location\" {\n  description = \"Location of Azure resource\"\n  default     = \"West Europe\"\n}\n\nvariable \"service_plan_name\" {\n  description = \"Service plan name\"\n}\n\nvariable \"app_name\" {\n  description = \"Name of application\"\n}\n```", "```\nresource \"azurerm_app_service_plan\" \"plan-app\" {\n  name                = var.service_plan_name\n  location            = var.location\n  resource_group_name = var.resource_group_name\n  sku {\n    tier = \"Standard\"\n    size = \"S1\"\n  }\n}\n\nresource \"azurerm_app_service\" \"app\" {\n  name                = var.app_name\n  location            = var.location\n  resource_group_name = var.resource_group_name\n  app_service_plan_id = azurerm_app_service_plan.plan-app.id\n  app_settings = {\n    \"INSTRUMENTATIONKEY\" = azurerm_application_insights.appinsight-app.instrumentation_key\n  }\n}\n\nresource \"azurerm_application_insights\" \"appinsight-app\" {\n  name                = var.app_name\n  location            = var.location\n  resource_group_name = var.resource_group_name\n  application_type    = \"web\"\n}\n```", "```\noutput \"webapp_id\" {\n  value = azurerm_app_service.app.id\n}\n\noutput \"webapp_url\" {\n  value = azurerm_app_service.app.default_site_hostname\n}\n```", "```\nresource \"azurerm_resource_group\" \"rg-app\" {\n  name     = \"RG_MyAPP_demo\"\n  location = \"West Europe\"\n}\n\nmodule \"webapp\" {\n  source = \"../Modules/webapp\"\n  service_plan_name = \"spmyapp\"\n  app_name = \"myappdemo\"\n  location = azurerm_resource_group.rg-app.location\n  resource_group_name = azurerm_resource_group.rg-app.name\n}\n\noutput \"webapp_url\" {\n  value = module.webapp.webapp_url\n}\n```", "```\nterraform init\nterraform plan -out=app.tfplan\nterraform apply app.tfplan \n```", "```\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"my-rg\"\n  location = \"West Europe\"\n}\n\nmodule \"network\" {\n  source              = \"Azure/network/azurerm\"\n  resource_group_name = azurerm_resource_group.rg.name\n  vnet_name           = \"vnetdemo\"\n  address_space       = \"10.0.0.0/16\"\n  subnet_prefixes     = [\"10.0.1.0/24\"]\n  subnet_names        = [\"subnetdemo\"]\n}\n```", "```\ngit clone https://github.com/mikaelkrief/terraform-azurerm-webapp.git\n```", "```\ngit tag v1.0.0\ngit push origin v1.0.0 \n```", "```\nterraform-<provider>-<name>\n```", "```\necho \"Hello world\"\n```", "```\nresource \"null_resource\" \"execfile\" {\n  provisioner \"local-exec\" {\n    command = \"${path.module}/script.sh\"\n    interpreter = [\"/bin/bash\"]\n  }\n}\n```", "```\nmodule \"execfile\" {\n  source = \"../Modules/execscript\"\n}\n```", "```\nterraform init\nterraform plan -out=\"app.tfplan\"\nterraform apply app.tfplan\n```", "```\nresource \"null_resource\" \"execfile\" {\n  provisioner \"local-exec\" {\n    command = \"script.sh\"\n    interpreter = [\"/bin/bash\"]\n  }\n}\n```", "```\nnpm install -g yo \n```", "```\nnpm install -g generator-az-terra-module\n```", "```\nyo az-terra-module\n```", "```\ncurl -L https://github.com/segmentio/terraform-docs/releases/download/v0.9.1/terraform-docs-v0.9.1-linux-amd64 -o terraform-docs-v0.9.1-linux-amd64\ntar -xf terraform-docs-v0.9.1-linux-amd64\nchmod u+x terraform-docs-v0.9.1-linux-amd64\nsudo mv terraform-docs-v0.9.1-linux-amd64 /usr/local/bin/terraform-docs\n```", "```\nchoco install terraform-docs -y\n```", "```\nterraform-docs --version\n```", "```\nterraform-docs markdown Modules/webapp/ > Modules/webapp/Readme.md\n```", "```\ngit clone https://dev.azure.com/<account>/Terraform-modules/_git/terraform-azurerm-webapp\n```", "```\ngit add .\ngit commit -m \"add code\"\ngit push origin master\n```", "```\ngit tag v1.0.0\ngit push origin v1.0.0 \n```", "```\nresource \"azurerm_resource_group\" \"rg-app\" {\n  name     = \"RG_MyAPP_Demo2\"\n  location = \"West Europe\"\n}\n\nmodule \"webapp\" {\n  source               = \"git::https://dev.azure.com/BookLabs/Terraform-modules/_git/terraform-azurerm-webapp?ref=v1.0.0\"\n  service_plan_name    = \"spmyapp2\"\n  app_name             = \"myappdemobook2\"\n  location             = azurerm_resource_group.rg-app.location\n  resource_group_name = azurerm_resource_group.rg-app.name\n}\noutput \"webapp_url\" {\n  value = module.webapp.webapp_url\n}\n```", "```\nrg-master:\n  source:  \"https://github.com/mikaelkrief/terraform-azurerm-resource-group.git\"\n  version: \"master\"\nwebapp-1.0.0:\n  source:  \"https://github.com/mikaelkrief/terraform-azurerm-webapp.git\"\n  version: \"v1.0.0\"\nnetwork-3.0.1:\n  source:  \"https://github.com/Azure/terraform-azurerm-network.git\"\n  version: \"v3.0.1\"\n\n```", "```\n.....\ndesc 'Fetch the Terraform modules listed in the Terrafile'\ntask :get_modules do\n  terrafile = read_terrafile\n  create_modules_directory\n  delete_cached_terraform_modules\n  terrafile.each do |module_name, repository_details|\n    source  = repository_details['source']\n    version = repository_details['version']\n    puts \"[*] Checking out #{version} of #{source} ...\".colorize(:green)\n    Dir.mkdir(modules_path) unless Dir.exist?(modules_path)\n    Dir.chdir(modules_path) do\n       #puts \"git clone -b #{version} #{source} #{module_name} &> /dev/null\".colorize(:green)\n      'git clone -q -b #{version} #{source} #{module_name}'\n    end\n  end\nend\n```", "```\nmodule \"resourcegroup\" {\n  source = \"./modules/rg-master\"\n ...\n}\n\nmodule \"webapp\" {\n  source = \"./modules/webapp-1.0.0\"\n...\n}\n\nmodule \"network\" {\n  source = \"./modules/network-3.0.1\"\n...\n}\n```", "```\nbundle install\nrake get_modules \n```", "```\nnetwork-3.0.1:\n  source:  \"https://github.com/Azure/terraform-azurerm-network.git\"\n  version: \"v3.0.1\"\nnetwork-2.0.0:\n  source:  \"https://github.com/Azure/terraform-azurerm-network.git\"\n  version: \"v2.0.0\"\n```", "```\nchoco install golang -y\n```", "```\nGOLANG_VERSION=\"1.14.6\"\nGOLANG_OS_ARCH=linux-amd64\n\nmkdir \"$HOME/go\"\nmkdir \"$HOME/go/bin\"\nmkdir \"$HOME/go/src\"\n\ncurl -Os https://storage.googleapis.com/golang/go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz >/dev/null 2>&1 &&\n tar -zxvf go${GOLANG_VERSION}.${GOLANG_OS_ARCH}.tar.gz -C /usr/local/ >/dev/null\n\n# Refresh Go environment.\nexport GOPATH=\"$HOME/go\"\nexport PATH=\"/usr/local/go/bin:$GOPATH/bin:$PATH\"\n\n```", "```\nvariable \"string1\" {}\n\nvariable \"string2\" {}\n\n## PUT YOUR MODULE CODE\n##_____________________\n\n```", "```\noutput \"stringfct\" {\n  value = format(\"This is test of %s with %s\", var.string1, upper(var.string2))\n}\n```", "```\nmodule \"demo\" {\n  source  = \"../../\"\n  string1 = \"module\"\n  string2 = \"terratest\"\n}\n\noutput \"outmodule\" {\n  value = module.demo.stringfct\n}\n```", "```\npackage test\n\nimport (\n   \"testing\"\n   \"github.com/gruntwork-io/terratest/modules/terraform\"\n   \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestTerraformModule(t *testing.T) {\n   terraformOptions := &terraform.Options{\n      // path to the terraform configuration\n      TerraformDir: \"./fixture\",\n   }\n\n   // lean up resources with \"terraform destroy\" at the end of the test.\n   defer terraform.Destroy(t, terraformOptions)\n\n   // Run \"terraform init\" and \"terraform apply\". Fail the test if there are any errors.\n   terraform.InitAndApply(t, terraformOptions)\n\n   // Run `terraform output` to get the values of output variables and check they have the expected values.\n   output := terraform.Output(t, terraformOptions, \"outmodule\")\n   assert.Equal(t, \"This is test of module with TERRATEST\", output)\n}\n```", "```\ngo get github.com/gruntwork-io/terratest/modules/terraform\n```", "```\ngo test -v\n```", "```\nterraformOptions := &terraform.Options{\n   // path to the terraform configuration\n   TerraformDir: \"./fixture\",\n}\n```", "```\ndefer terraform.Destroy(t, terraformOptions)\n```", "```\nterraform.InitAndApply(t, terraformOptions)\n```", "```\noutput := terraform.Output(t, terraformOptions, \"outmodule\")\n```", "```\nassert.Equal(t, \"This is test of module with TERRATEST\", output)\n```", "```\ngo test -v\n```", "```\nazureVmName := terraform.Output(t, terraformOptions, \"vm_name\")\nresourceGroupName := terraform.Output(t, terraformOptions, \"rg_name\")\n\nactualVMSize := azure.GetSizeOfVirtualMachine(t, vmName, resourceGroupName, \"\")\nexpectedVMSize := compute.VirtualMachineSizeTypes(\"Standard_DS2_v2\")\n```", "```\nFROM mikaelkrief/go-terraform:0.12.25\n\nARG ARG_MODULE_NAME=\"module-test\"\nENV MODULE_NAME=${ARG_MODULE_NAME}\n\n# Set work directory.\nRUN mkdir /go/src/${MODULE_NAME}\nCOPY ./module /go/src/${MODULE_NAME}\nWORKDIR /go/src/${MODULE_NAME}\n\nRUN chmod +x runtests.sh\nENTRYPOINT [ \"./runtests.sh\" ]\n```", "```\n#!/bin/bash\necho \"==> Get Terratest modules\"\ngo get github.com/gruntwork-io/terratest/modules/terraform\necho \"==> go test\"\ngo test -v ./tests/ -timeout 30m\n```", "```\n- script: |\n    docker build -t module-test:$(tag) .\n  workingDirectory: \"$(Build.SourcesDirectory)/CHAP05/testing-terratest/\"\n  displayName: \"Docker build\"\n- script: |\n    docker run module-test:$(tag)\n  workingDirectory: \"$(Build.SourcesDirectory)/CHAP05/testing-terratest/\"\n  displayName: \"Docker run\"\n- task: PowerShell@2\n  displayName: \"Tag code\"\n  inputs:\n    targetType: 'inline'\n    script: |\n      $env:GIT_REDIRECT_STDERR` = '2>&1'\n      $tag = \"v$(Build.BuildNumber)\"\n      git tag $tag\n      Write-Host \"Successfully created tag $tag\"\n      git push --tags\n      Write-Host \"Successfully pushed tag $tag\"\n    failOnStderr: false\n```", "```\nFROM mikaelkrief/go-terraform:0.12.25\n\n```", "```\nRUN mkdir /go/src/${MODULE_NAME}\nCOPY ./module /go/src/${MODULE_NAME}\nWORKDIR /go/src/${MODULE_NAME}\n```", "```\nRUN chmod +x runtests.sh\nENTRYPOINT [ \"./runtests.sh\" ]\n```", "```\n...\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v1\n      - name: Set up Go 1.14\n        uses: actions/setup-go@v1\n        with:\n          go-version: 1.14\n        id: go\n      - name: Get Go dependencies\n        run: go get -v -t -d ./...\n      - name: Run Tests\n        working-directory: \"CHAP05/testing-terratest/module/tests/\"\n        run: |\n          go test -v -timeout 30m\n      - name: Bump version and push tag\n        uses: mathieudutour/github-tag-action@v4\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "```\n- name: Check out code\n  uses: actions/checkout@v1\n```", "```\n- name: Set up Go 1.14\n  uses: actions/setup-go@v1\n  with:\n    go-version: 1.14  #need to be >=1.13\n  id: go\n```", "```\n- name: Get Go dependencies\n  run: go get -v -t -d ./...\n```", "```\n- name: Run Tests\n  working-directory: \"CHAP05/testing-terratest/module/tests/\"\n  run: |\n    go test -v -timeout 30m\n```", "```\n- name: Bump version and push tag\n  uses: mathieudutour/github-tag-action@v4\n  with:\n    github_token: ${{ secrets.GITHUB_TOKEN }}\n```"]