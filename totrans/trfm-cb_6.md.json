["```\nmkdir clouddrive/demotf\n```", "```\nterraform {\n  required_version = \">= 0.12\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"rg-app\" {\n  name     = \"RG-TEST-DEMO\"\n  location = \"westeurope\"\n}\n```", "```\n> terraform init\n> terraform plan -out=app.tfplan\n> terraform apply app.tfplan\n```", "```\naz account set -s <subscription _id>\n```", "```\naz ad sp create-for-rbac --name=\"BookDemoTerraform\" --role=\"Contributor\" --scopes=\"/subscriptions/<Subscription Id>\"\n```", "```\nexport ARM_SUBSCRIPTION_ID =<subscription_id>\nexport ARM_CLIENT_ID=<appId>\nexport ARM_CLIENT_SECRET=<password>\nexport ARM_TENANT_ID=<tenant id>\n```", "```\n> terraform init\n> terraform plan -out=app.tfplan\n> terraform apply app.tfplan\n```", "```\nprovider \"azurerm\" {\n   ...\n  subscription_id = \"<Subscription ID>\"\n  client_id       = \"<Client ID>\"\n  client_secret   = \"<Client Secret>\"\n  tenant_id       = \"<Tenant ID>\"\n}\n```", "```\n# 1- Create Resource Group\naz group create --name \"RG-TFBACKEND\" --location westeurope\n\n# 2- Create storage account\naz storage account create --resource-group \"RG-TFBACKEND\" --name \"storagetfbackend\" --sku Standard_LRS --encryption-services blob\n\n# 3- Create blob container\naz storage container create --name \"tfstate\" --account-name \"storagetfbackend\"\n\n# 4- Get storage account key\nACCOUNT_KEY=$(az storage account keys list --resource-group \"RG-TFBACKEND\" --account-name \"storagetfbackend\" --query [0].value -o tsv)\n\necho $ACCOUNT_KEY\n```", "```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"RG-TFBACKEND\"\n    storage_account_name = \"storagetfbackend\"\n    container_name       = \"tfstate\"\n    key                  = \"myapp.tfstate\"\n  }\n}\n```", "```\nexport ARM_ACCESS_KEY = <access key>\n```", "```\nexport ARM_SUBSCIPTION_ID =<subscription_id>\nexport ARM_CLIENT_ID=<appId>\nexport ARM_CLIENT_SECRET=<password>\nexport ARM_TENANT_ID=<tenant id>\nexport ARM_ACCESS_KEY=<account key>\n\n> terraform init\n> terraform plan -out=app.tfplan\n> terraform apply app.tfplan\n```", "```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"RG-TFBACKEND\"\n    storage_account_name = \"storagetfbackend\"\n    container_name       = \"tfstate\"\n    key                  = \"myapp.tfstate\"\n    access_key           = xxxxxx-xxxxx-xxx-xxxxx\n  }\n}\n```", "```\nterraform {\n  required_version = \">= 0.12\"\n  backend \"azurerm\" {\n  }\n}\n```", "```\nresource_group_name  = \"RG-TFBACKEND\"\nstorage_account_name = \"storagetfbackend\"\ncontainer_name       = \"tfstate\"\nkey                  = \"myapp.tfstate\"\n```", "```\nterraform init -backend-config=\"<path>/backend.tfvars\"\n```", "```\n{\n...\n  \"parameters\": {\n    \"appserviceName\": { ... },\n    \"extensionName\": { ... },\n    \"extensionVersion\": { ... }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Web/sites/siteextensions\",\n      \"name\": \"[concat(parameters('appserviceName'), '/', parameters('extensionName'))]\",\n      ...\n      \"properties\": {\n        \"version\": \"[parameters('extensionVersion')]\"\n      }\n    }\n  ]\n}\n```", "```\nresource \"azurerm_template_deployment\" \"extension\" {\n  name                = \"extension\"\n  resource_group_name = azurerm_resource_group.rg-app.name\n  template_body       = file(\"ARM_siteExtension.json\")\n\n  parameters = {\n    appserviceName   = azurerm_app_service.app.name\n    extensionName    = \"AspNetCoreRuntime.2.2.x64\"\n    extensionVersion = \"2.2.0-preview3-35497\"\n  }\n\n  deployment_mode = \"Incremental\"\n}\n```", "```\n    resource \"azurerm_storage_account\" \"sa\" {\n      name                     = \"saazclidemo\"\n      resource_group_name      = azurerm_resource_group.rg.name\n      location                 = \"westeurope\"\n      account_tier             = \"Standard\"\n      account_kind             = \"StorageV2\"\n      account_replication_type = \"GRS\"\n    }\n    ```", "```\n    resource \"null_resource\" \"webapp_static_website\" {\n      triggers = {\n        account = azurerm_storage_account.sa.name\n      }\n\n      provisioner \"local-exec\" {\n        command = \"az storage blob service-properties update --account-name ${azurerm_storage_account.sa.name} --static-website true --index-document index.html --404-document 404.html\"\n      }\n    }\n    ```", "```\n    az login --service-principal --username APP_ID --password PASSWORD --tenant TENANT_ID\n    ```", "```\n    resource \"null_resource\" \"cosmosdb_database\" {\n      provisioner \"local-exec\" {\n        command = \"az cosmosdb database create --name ${var.cosmosdb_name} --db-name ${var.app_name}   --resource-group ${var.cosmosdb_rg} --throughput ${var.cosmosdb_throughput}\"\n      }\n\n      provisioner \"local-exec\" {\n       when    = \"destroy\"\n        command = \"az cosmosdb database delete --name ${var.cosmosdb_name} --db-name ${var.app_name}   --resource-group ${var.cosmosdb_rg}\"\n      }\n    }\n    ```", "```\n    Data Source=mysever.com;initial catalog=databasedemo;User ID=useradmin;Password=demobook\n    ```", "```\n    data \"azurerm_key_vault\" \"keyvault\" {\n      name                = \"keyvdemobook\"\n      resource_group_name = \"rg_keyvault\"\n    }\n\n    data \"azurerm_key_vault_secret\" \"app-connectionstring\" {\n      name         = \"ConnectionStringApp\"\n      key_vault_id = data.azurerm_key_vault.keyvault.id\n    }\n    ```", "```\n    resource \"azurerm_app_service\" \"app\" {\n      name                = \"demovaultbook\"\n      location            = azurerm_resource_group.rg-app.location\n      resource_group_name = azurerm_resource_group.rg-app.name\n      app_service_plan_id = azurerm_app_service_plan.plan-app.id\n\n      connection_string {\n        name  = \"Database\"\n        type  = \"SQLServer\"\n        value = data.azurerm_key_vault_secret.app-connectionstring.value\n      }\n    }\n    ```", "```\n    data \"azurerm_resources\" \"nsg\" {\n      type                = \"Microsoft.Network/networkSecurityGroups\"\n      resource_group_name = \"RG-DEMO\"\n      required_tags = {\n        DEFAULTRULES = \"TRUE\"\n      }\n    }\n    ```", "```\n    resource \"azurerm_network_security_rule\" \"default-rules\" {\n      for_each                    = { for n in  \n                                      data.azurerm_resources.nsg.resources \n                                      : n.name => n }\n      name                        = \"${each.key}-SSH\"\n      priority                    = 100\n      direction                   = \"InBound\"\n      access                      = \"Allow\"\n      protocol                    = \"Tcp\"\n      source_port_range           = \"*\"\n      destination_port_range      = \"22\"\n      source_address_prefix       = \"*\"\n      destination_address_prefix  = \"*\"\n      resource_group_name         = \"RG-DEMO\"\n      network_security_group_name = each.key\n    }\n    ```", "```\n    output \"nsg\" {\n      value = { for n in data.azurerm_resources.nsg.resources : n.name => n }\n    }\n    ```", "```\n    resource \"azurerm_resource_group\" \"rg\" {\n      name     = \"RG-VM\"\n      location = \"West Europe\"\n    }\n    ```", "```\n    resource \"azurerm_public_ip\" \"ip\" {\n      name                = \"vmdemo-pip\"\n      resource_group_name = azurerm_resource_group.rg.name\n      location            = azurerm_resource_group.rg.location\n      allocation_method   = \"Dynamic\"\n    }\n    ```", "```\n    data \"azurerm_subnet\" \"subnet\"{\n      name = \"Default1\"\n      resource_group_name = \"RG_NETWORK\"\n      virtual_network_name = \"VNET-DEMO\"\n    }\n\n    resource \"azurerm_network_interface\" \"nic\" {\n      name                = \"vmdemo-nic\"\n      resource_group_name = azurerm_resource_group.rg.name\n      location            = azurerm_resource_group.rg.location\n\n      ip_configuration {\n        name                          = \"vmipconf\"\n        subnet_id                     = data.azurerm_subnet.subnet.id\n        private_ip_address_allocation = \"Dynamic\"\n        public_ip_address_id          = azurerm_public_ip.ip.id\n      }\n    }\n    ```", "```\n    data \"azurerm_key_vault\" \"keyvault\" {\n      name                = \"keyvdemobook\"\n      resource_group_name = \"rg_keyvault\"\n    }\n\n    data \"azurerm_key_vault_secret\" \"vm-password\" {\n      name         = \"vmdemoaccess\"\n      key_vault_id = data.azurerm_key_vault.keyvault.id\n    }\n    ```", "```\n    resource \"azurerm_linux_virtual_machine\" \"vm\" {\n      name                            = \"myvmdemo\"\n    ...\n      admin_username                  = \"adminuser\"\n      admin_password                  = data.azurerm_key_vault_secret.vm-password.value\n      network_interface_ids = [azurerm_network_interface.nic.id]\n\n      source_image_reference {\n        publisher = \"Canonical\"\n        offer     = \"UbuntuServer\"\n        sku       = \"18.04-LTS\"\n        version   = \"latest\"\n      }\n    ...\n\n      provisioner \"remote-exec\" {\n        inline = [\n          \"apt update\",\n        ]\n        connection {\n          host     = self.public_ip_address\n          user     = self.admin_username\n          password = self.admin_password\n        }\n      }\n    }\n    ```", "```\n    data \"azurerm_storage_account\" \"storagezip\" {\n      name                = \"storappdemo\"\n      resource_group_name = \"RG-storageApp\"\n    }\n    ```", "```\n    data \"azurerm_storage_account_sas\" \"storage_sas\" {\n      connection_string = data.azurerm_storage_account.storagezip.primary_connection_string\n    ...\n      services {\n        blob  = true\n    ...\n      }\n      start  = \"2020–06–15\"\n      expiry = \"2021–03–21\"\n      permissions {\n        read    = true\n        write   = false\n       ...\n      }\n    }\n    ```", "```\n    resource \"azurerm_app_service\" \"app\" {\n    ...\n      app_settings = {\n        \"WEBSITE_RUN_FROM_PACKAGE\" = \"https://${data.azurerm_storage_account.storagezip.name}.blob.core.windows.net/app/myapp_v1.0.0/zip${data.azurerm_storage_account_sas.storage_sas.sas}\"\n      }\n    }\n    ```", "```\n    curl -LO https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '\"' -f 4)/terraformer-azure-linux-amd64\n     chmod +x terraformer-azure-linux-amd64\n     sudo mv terraformer-azure-linux-amd64 /usr/local/bin/terraformer\n    ```", "```\n    provider \"azurerm\" {\n      features {}\n    }\n    ```", "```\n    export ARM_SUBSCRIPTION_ID=\"xxxxxx-xxx-xxxxx-xxxx\"\n    export ARM_CLIENT_ID=\"xxxxx-xxxx-xxxx-xxxxx\"\n    export ARM_CLIENT_SECRET=\"xxxx-xxxxxx-xxxxxx-xxxxx\"\n    export ARM_TENANT_ID=\"xxxxx-xxxxxx-xxxxx-xxxxx\"\n    ```", "```\n    terraformer import azure --resources=resource_group  --compact --path-pattern {output}/{provider}/\n    ```", "```\n    provider \"azurerm\" {\n      version = \"~>v2.14.0\"\n      features {}\n    }\n    ```", "```\n    terraformer plan azure --resources=resource_group --compact --path-pattern {output}/{provider}/ \n    ```", "```\n    terraformer import plan generated/azurerm/plan.json\n    ```"]