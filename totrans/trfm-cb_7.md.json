["```\nvariable \"vmhosts\" {\n  type    = list(string)\n  default = [\"vmwebdemo1\", \"vmwebdemo2\"]\n}\n```", "```\nmodule \"network\" {\n  source = \"Azure/network/azurerm\"\n  resource_group_name = \"rg-demoinventory\"\n  subnet_prefixes = [\"10.0.2.0/24\"]\n  subnet_names = [\"subnet1\"]\n}\n\nmodule \"linuxservers\" {\n  source = \"Azure/compute/azurerm\"\n  resource_group_name = \"rg-demoinventory\"\n  vm_os_simple = \"UbuntuServer\"\n  nb_instances = 2\n  nb_public_ip = 2\n  vm_hostname = \"vmwebdemo\"\n  public_ip_dns = var.vmhosts\n  vnet_subnet_id = module.network.vnet_subnets[0]\n}\n```", "```\n[vm-web]\n<host1> ansible_host=1<ip 1>\n<host2> ansible_host=<ip 2>\n```", "```\n[vm-web]\n%{ for host, dns in vm_dnshost ~}\n${host} ansible_host=${dns}\n%{ endfor ~}\n```", "```\nresource \"local_file\" \"inventory\" {\n  filename = \"inventory\"\n  content = templatefile(\"template-inventory.tpl\",\n    {\n         vm_dnshost = zipmap(var.vmhosts,module.linuxservers.network_interface_private_ip)\n    })\n}\n```", "```\n${host} ansible_host=${ip}\n```", "```\n[vm-web]\nvmwebdemo1 ansible_host=10.0.2.5\nvmwebdemo2 ansible_host=10.0.2.4\n```", "```\ngem install kitchen-terraform\n```", "```\nsource \"https://rubygems.org/\" do\n  gem \"kitchen-terraform\", \"~> 5.4\"\nend\n```", "```\nbundle install\n```", "```\ntest > integration > kt_suite\n```", "```\n---\nname: default\n```", "```\ncontrol \"check_inventory_file\" do\n  describe file('./inventory') do\n    it { should exist }\n    its('size') { should be > 0 }\n  end\nend\n```", "```\n---\ndriver:\n  name: terraform\n\nprovisioner:\n  name: terraform\n\nverifier:\n  name: terraform\n  systems:\n    - name: basic\n      backend: local\n      controls:\n        - check_inventory_file\nplatforms:\n  - name: terraform\nsuites:\n  - name: kt_suite\n```", "```\nkitchen test\n```", "```\ndriver:\n  name: terraform\n```", "```\nprovisioner:\n  name: terraform\n```", "```\nverifier:\n  name: terraform\n  systems:\n    - name: basic\n      backend: local\n      controls:\n        - check_inventory_file\nplatforms:\n  - name: terraform\nsuites:\n  - name: kt_suite\n```", "```\nresource \"azurerm_application_insights\" \"appinsight-app\" {\n...\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n```", "```\nlifecycle { \n prevent_destroy = var.prevent_destroy_ai \n}\n```", "```\nresource \"azurerm_app_service\" \"app\" {\n  name                = \"${var.app_name}-${var.environement}\"\n...\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```", "```\nresource \"azurerm_app_service\" \"app\" {\n  name = \"${var.app_name}-test-${var.environement}\"\n....\n}\n```", "```\nterraform plan -out=\"tfout.tfplan\"\n```", "```\n$tfplan = terraform show -json tfout.tfplan\n$actions = $tfplan | jq.exe .resource_changes[].change.actions[]\n$nbdelete = $actions -match 'delete' | Measure-Object | Select-Object Count\nWrite-Host $nbdelete.Count\n```", "```\ndependencies {\n  paths = [\"../rg\"]\n}\n```", "```\ndependencies {\n  paths = [\"../rg\", \"../network\"]\n}\n```", "```\n> terragrunt init\n> terragrunt plan-all\n> terragrunt apply-all\n```", "```\n> terraform init -backend-config=\"backend.tfvars\"\n> terraform plan -var-file=\"env-vars.tfvars\"\n> terraform apply -var-file=\"env-vars.tfvars\"\n```", "```\nextra_arguments \"custom_backend\" {\n  commands = [\n    \"init\"\n  ]\n\n  arguments = [\n    \"-backend-config\", \"backend.tfvars\"\n  ]\n}\n```", "```\nextra_arguments \"custom_vars-file\" {\n  commands = [\n    \"apply\",\n    \"plan\",\n    \"destroy\",\n    \"refresh\"\n  ]\n\n  arguments = [\n    \"-var-file\", \"env-vars.tfvars\"\n  ]\n}\n```", "```\nterragrunt init\n```", "```\n> terragrunt plan\n> terragrunt apply\n```", "```\nterraform init -backend-config=\"backend.tfvars\"\n```", "```\nterraform plan -var-file=\"env-vars.tfvars\"\n```", "```\nterragrunt apply\n```", "```\ntrigger:\n  - master\npool:\n  vmImage: 'ubuntu-latest'\n```", "```\n- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0\n  displayName: 'Install Terraform 0.12.26'\n  inputs:\n    terraformVersion: 0.12.26\n```", "```\n- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0\n  displayName: 'terraform init'\n  inputs:\n    command: init\n    workingDirectory: \"CHAP07/pipeline/\"\n    backendType: azurerm\n    backendServiceArm: '<Your Service connection name>'\n    backendAzureRmResourceGroupName: 'RG_BACKEND'\n    backendAzureRmStorageAccountName: storagetfbackendbook\n    backendAzureRmContainerName: tfstate\n    backendAzureRmKey: myappdemo.tfstate\n```", "```\n- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0\n  displayName: 'terraform plan'\n  inputs:\n    command: plan\n    workingDirectory: \"CHAP07/pipeline/\"\n    commandOptions: '-out=\"out.tfplan\"'\n```", "```\n- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0\n  displayName: 'terraform apply'\n  inputs:\n    command: apply\n    workingDirectory: \"CHAP07/pipeline/\"\n    commandOptions: 'out.tfplan'\n```", "```\n$envName=$args[0]\n$countws = terraform workspace list -no-color | Select-String $envName -AllMatches\nif ($countws.Matches.Count -eq 0) {\n    Write-Host \"Create new Workspace $envName\"\n    terraform workspace new $envName\n}else{\n    Write-Host \"The Workspace $envName already exist and is selected\"\n    terraform workspace select $envName\n}\n```", "```\n- task: PowerShell@2\n  inputs:\n    filePath: 'CHAP07/workspace-pipeline/ManageWorkspaces.ps1'\n    arguments: '$(Build.SourceBranchName)'\n    workingDirectory: \"CHAP07/workspace-pipeline/\"\n```"]