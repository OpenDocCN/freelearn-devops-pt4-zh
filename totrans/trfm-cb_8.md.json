["```\nterraform {\n  backend \"remote\" {\n    hostname     = \"app.terraform.io\"\n    organization = \"demoBook\"\n\n    workspaces {\n      name = \"demo-app\"\n    }\n  }\n}\n```", "```\ncredentials \"app.terraform.io\" {\n token = \"<your api token generated>\"\n}\n```", "```\nmodule \"webapp\" {\n  source  = \"app.terraform.io/demoBook/webapp/azurerm\"\n  version = \"1.0.0\"\n...\n}\n```", "```\nterraform {\n  backend \"remote\" {\n    hostname     = \"app.terraform.io\"\n    organization = \"demoBook\"\n\n    workspaces {\n      name = \"demo-app-remote\"\n    }\n  }\n}\n```", "```\n{\n  \"data\": {\n    \"attributes\": {\n      \"name\": \"workspace-demo-api\",\n      \"auto-apply\": true,\n      \"working-directory\": \"CHAP08/remote\",\n      \"vcs-repo\": {\n        \"identifier\": \"mikaelkrief/terraform-Cookbook\",\n        \"oauth-token-id\": \"ot-Jxxxxxxxxxx\",\n        \"branch\": \"\",\n        \"default-branch\": true,\n        \"queue-all-runs\": true\n      }\n    },\n    \"type\": \"workspaces\"\n  }\n}\n```", "```\n$apiToken = $args[0]  #API TOKEN\n$organization = \"demoBook\"\n$headers = @{ }\n$headers[\"Authorization\"] = \"Bearer  $apiToken\"\n$headers[\"Content-Type\"] = \"application/vnd.api+json\"\n$uriWorkspaces = \"https://app.terraform.io/api/v2/organizations/$organization/workspaces\"\ntry\n{\n    $json = Get-Content(\"workspace.json\")\n    $response = Invoke-RestMethod -Uri $uriWorkspaces -Body $json -Headers $headers -Method Post\n    $worspaceId = $response.data.id\n    Write-Host $worspaceId\n}\nCatch\n{\n   ...\n}\n```", "```\n.\\tfcloud-workspaces.ps1 <your api token>\n```", "```\n{\n  \"vars\": [\n    {\n      \"data\": {\n        \"type\": \"vars\",\n        \"attributes\": {\n          \"key\": \"ARM_SUBSCRIPTION_ID\",\n          \"value\": \"xxxxx-xxxxxxx-xxxxxx-xxxxxx\",\n          \"category\": \"env\",\n....\n        }\n      }\n    },\n  ....\n  ]\n}\n```", "```\n$apiToken = $args[0]  #API TOKEN\n$worspaceId = $args[1] # WORKSPACE ID\n$headers = @{ }\n$headers[\"Authorization\"] = \"Bearer  $apiToken\"\n$headers[\"Content-Type\"] = \"application/vnd.api+json\"\n$uriVariables = \"https://app.terraform.io/api/v2/workspaces/$worspaceId/vars\"\n\n$json = Get-Content(\"variables.json\") | ConvertFrom-Json\n$varList = $json.vars\nforeach ($var in $varList)\n{\n   $varjson = $var | ConvertTo-Json\n   Invoke-RestMethod -Uri $uriVariables -Body $varjson -Headers $headers -Method Post\n}\n```", "```\n.\\tfcloud-variables.ps1 <your token id> <workspace id>\n```", "```\n{\n  \"data\": {\n    \"attributes\": {\n      \"is-destroy\": false,\n      \"message\": \"Run for demo Book\"\n    },\n    \"type\":\"runs\",\n    \"relationships\": {\n      \"workspace\": {\n        \"data\": {\n          \"type\": \"workspaces\",\n          \"id\": \"ws-xxxxxxxxxx\"\n        }\n      }\n    }\n  }\n}\n```", "```\n$apiToken = $args[0]  #API TOKEN\n$headers = @{ }\n$headers[\"Authorization\"] = \"Bearer  $apiToken\"\n$headers[\"Content-Type\"] = \"application/vnd.api+json\"\n$uriWorkspaces = \"https://app.terraform.io/api/v2/runs\"\n\n$json = Get-Content(\"run.json\")\nInvoke-RestMethod -Uri $uriWorkspaces -Body $json -Headers $headers -Method Post\n```", "```\n.\\tfcloud-run-plan.ps1 <your yoken api>\n```", "```\nimport \"tfplan-functions\" as plan\n\nallAzureAppServices = plan.find_resources(\"azurerm_app_service\")\n\nviolatingAzureAppServices = plan.filter_attribute_is_not_value(allAzureAppServices,\n                            \"site_config.0.ftps_state\", \"FtpsOnly\" , true)\n\nmain = rule {\n  length(violatingAzureAppServices[\"messages\"]) is 0\n}\n```", "```\nimport \"tfplan-functions\" as plan\n\nallowed_tiers = [\"Basic\", \"Standard\"]\n\nallAzureServicePlan = plan.find_resources(\"azurerm_app_service_plan\")\n\nviolatingAzureServicePlan = plan.filter_attribute_not_in_list(allAzureServicePlan,\n \"sku.0.tier\", allowed_tiers, true)\n\nmain = rule {\n  length(violatingAzureServicePlan[\"messages\"]) is 0\n}\n```", "```\nmodule \"tfplan-functions\" {\n  source = \"https://raw.githubusercontent.com/hashicorp/terraform-guides/master/governance/third-generation/common-functions/tfplan-functions/tfplan-functions.sentinel\"\n}\n\npolicy \"restrict-app-service-to-ftps\"{\n  source =\"./restrict-app-service-to-ftps.sentinel\"\n  enforcement_level = \"hard-mandatory\"\n}\n\npolicy \"allowed-app-service-plan-tiers\"{\n  source =\"./allowed-app-service-plan-tiers.sentinel\"\n  enforcement_level = \"hard-mandatory\"\n}\n```", "```\nallAzureAppServices = plan.find_resources(\"azurerm_app_service\")\nviolatingAzureAppServices = plan.filter_attribute_is_not_value(\n                            allAzureAppServices, \"site_config.0.ftps_state\", \n                            \"FtpsOnly\" , true)\n```", "```\nallAzureServicePlan = plan.find_resources(\"azurerm_app_service_plan\")\n\nviolatingAzureServicePlan = plan.filter_attribute_not_in_list(allAzureServicePlan,\n                    \"sku.0.tier\", allowed_tiers, true)\n```", "```\nmodule \"webapp\" {\n  source               = \"app.terraform.io/demoBook/webapp/azurerm\"\n  version              = \"1.0.4\"\n  ...\n sp_sku               = \"Premium\"\n}\n\n```"]