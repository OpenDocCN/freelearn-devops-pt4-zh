- en: Using Terraform Cloud to Improve Collaboration
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Terraform Cloud 改善协作
- en: Throughout this book, we have learned how to write Terraform configurations
    and use the Terraform CLI throughout different recipes. All this applies to small
    projects and small teams, but in a corporate context, when working on large infrastructure
    projects, it is necessary to have a real platform for sharing modules and centralized
    deployment. This platform, which must be able to be connected to a source control
    repository with a **Version Control System** (**VCS**) such as Git, must allow
    infrastructure changes to be applied to Terraform in an automated and centralized
    manner for all team members. This is why, since 2019, HashiCorp has published
    a SaaS platform (known as a cloud) called **Terraform Cloud**. To learn more about
    Terraform Cloud and its history, please refer to the documentation here: [https://www.terraform.io/docs/cloud/index.html](https://www.terraform.io/docs/cloud/index.html).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经学习了如何编写 Terraform 配置，并在不同的实例中使用 Terraform CLI。所有这些都适用于小型项目和小型团队，但在企业环境中，当涉及到大型基础设施项目时，需要一个真正的平台来共享模块和进行集中部署。这个平台必须能够连接到一个带有**版本控制系统**（**VCS**）如
    Git 的源代码控制库，并且必须支持以自动化和集中化的方式对 Terraform 进行基础设施更改，供所有团队成员使用。这就是为什么自 2019 年以来，HashiCorp
    发布了一个名为 **Terraform Cloud** 的 SaaS 平台（也叫云平台）。欲了解更多关于 Terraform Cloud 及其历史的信息，请参阅此文档：[https://www.terraform.io/docs/cloud/index.html](https://www.terraform.io/docs/cloud/index.html)。
- en: This Terraform Cloud platform (which also exists in an on-premise version called
    **Terraform Enterprise**), in its free plan in particular, provides functionalities
    of the `remote` backend type, a private modules registry, user management for
    a team of up to five users, and remote execution of Terraform configuration, which
    is stored in a VCS repository. In its paid plan, Terraform Cloud also integrates
    more advanced team management functionalities, provides cost estimation for resources
    that will be managed by Terraform, and supplies integration with **Sentinel**,
    which is a compliance framework. The complete and detailed list of Terraform Cloud
    functionalities is available in the documentation here: [https://www.hashicorp.com/products/terraform/pricing/](https://www.hashicorp.com/products/terraform/pricing/).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Terraform Cloud 平台（也有一个本地版本，称为 **Terraform Enterprise**）特别是在其免费计划中，提供了`remote`后端类型的功能、私有模块注册表、最多五名用户的团队管理以及对存储在
    VCS 仓库中的 Terraform 配置的远程执行。在付费计划中，Terraform Cloud 还集成了更先进的团队管理功能，提供了 Terraform
    将要管理的资源的成本估算，并提供与 **Sentinel** 的集成，Sentinel 是一个合规性框架。Terraform Cloud 功能的完整详细列表可以在文档中查看：[https://www.hashicorp.com/products/terraform/pricing/](https://www.hashicorp.com/products/terraform/pricing/)。
- en: In this last chapter of this book, we will learn how to use the `remote` backend
    of Terraform Cloud and how to share Terraform modules in the private registry
    on Terraform Cloud. Then, we will learn how to perform the remote execution of
    Terraform configuration directly inside Terraform Cloud and how to use Terraform
    Cloud using its APIs. Finally, we will end this chapter by exploring the paid
    features and usage of Sentinel in order to apply compliance tests and visualize
    cost estimation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章中，我们将学习如何使用 Terraform Cloud 的 `remote` 后端，如何在 Terraform Cloud 上的私有注册表中共享
    Terraform 模块。接着，我们将学习如何在 Terraform Cloud 中直接执行 Terraform 配置的远程执行，并且如何使用 Terraform
    Cloud 的 API。最后，我们将通过探索付费功能和使用 Sentinel 来进行合规性测试和可视化成本估算，结束本章内容。
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Using the remote backend in Terraform Cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Terraform Cloud 中使用远程后端
- en: Using Terraform Cloud as a private module registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Terraform Cloud 用作私有模块注册表
- en: Executing Terraform configuration remotely in Terraform Cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Terraform Cloud 中远程执行 Terraform 配置
- en: Automating Terraform Cloud using APIs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 API 自动化 Terraform Cloud
- en: Testing the compliance of Terraform configurations using Sentinel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Sentinel 测试 Terraform 配置的合规性
- en: Using cost estimation for cloud cost resources governance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云成本资源治理的成本估算
- en: Let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The primary prerequisite for this chapter is to have an account on the Terraform
    Cloud platform. Creating an account is simple and offers a free plan. You can
    do this at [https://app.terraform.io/signup/account](https://app.terraform.io/signup/account).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要前提条件是拥有一个 Terraform Cloud 平台的账户。创建账户非常简单，并且提供免费计划。你可以在 [https://app.terraform.io/signup/account](https://app.terraform.io/signup/account)
    上完成注册。
- en: For all the recipes in this chapter, we will already be connected to Terraform
    Cloud via a web browser.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的所有食谱，我们将已经通过 Web 浏览器连接到 Terraform Cloud。
- en: After registering for an account, it will be necessary (if you haven't done
    so already) to create an organization by clicking on the Create organization link.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注册账户后，如果尚未创建组织，则需要通过点击“创建组织”链接来创建一个组织。
- en: For detailed steps regarding how to create an account and organization, follow
    the Terraform learning process at [https://learn.hashicorp.com/terraform/cloud-getting-started/signup](https://learn.hashicorp.com/terraform/cloud-getting-started/signup).
    For more information on organizations, read the documentation at [https://www.terraform.io/docs/cloud/users-teams-organizations/organizations.html#creating-organizations](https://www.terraform.io/docs/cloud/users-teams-organizations/organizations.html#creating-organizations).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何创建账户和组织的详细步骤，请参考[https://learn.hashicorp.com/terraform/cloud-getting-started/signup](https://learn.hashicorp.com/terraform/cloud-getting-started/signup)上的
    Terraform 学习流程。有关组织的更多信息，请阅读[https://www.terraform.io/docs/cloud/users-teams-organizations/organizations.html#creating-organizations](https://www.terraform.io/docs/cloud/users-teams-organizations/organizations.html#creating-organizations)的文档。
- en: Finally, it's important that you're familiar with the concept of workspaces
    in Terraform Cloud (which is a little different from the workspaces we studied
    in the *Using workspaces to manage environments* recipe in [Chapter 4](fc591e87-b893-40fa-9021-7827bffcc094.xhtml), *Using
    the Terraform CLI*). Please refer to the documentation at [https://www.terraform.io/docs/cloud/workspaces/index.html](https://www.terraform.io/docs/cloud/workspaces/index.html) to
    find out more.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，了解 Terraform Cloud 中的工作空间概念非常重要（与我们在[第 4 章](fc591e87-b893-40fa-9021-7827bffcc094.xhtml)中*使用工作空间管理环境*食谱中研究的工作空间略有不同）。请参考[https://www.terraform.io/docs/cloud/workspaces/index.html](https://www.terraform.io/docs/cloud/workspaces/index.html)的文档，了解更多信息。
- en: When creating a connection between Terraform Cloud and a Git repository, we
    will be using GitHub. You can create a free account on GitHub at [https://github.com/](https://github.com/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Terraform Cloud 与 Git 仓库之间的连接时，我们将使用GitHub。你可以在[https://github.com/](https://github.com/)上创建一个免费的
    GitHub 账户。
- en: The source code for this chapter is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08)找到。
- en: Check out the following video to see the code in action: [https://bit.ly/2Zl3tyA](https://bit.ly/2Zl3tyA)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，查看代码的实际操作：[https://bit.ly/2Zl3tyA](https://bit.ly/2Zl3tyA)
- en: Using the remote backend in Terraform Cloud
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Terraform Cloud 中使用远程后端
- en: Throughout this book, we have discussed the backend and its importance for storing
    and sharing the Terraform state file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们讨论了后端及其在存储和共享 Terraform 状态文件中的重要性。
- en: In the *Protecting the state file in the Azure remote backend* recipe in [Chapter
    6](d054157b-d534-47c9-8079-3af13107c4ef.xhtml), *Provisioning Azure Infrastructure
    with Terraform*, we had a concrete case of this when we set up and used a backend
    in Azure (using Azure Storage). However, this recipe can only be applied with
    an Azure subscription. The different types of backend listed at [https://www.terraform.io/docs/backends/types/index.html](https://www.terraform.io/docs/backends/types/index.html)
    mostly require you to purchase platforms or tools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](d054157b-d534-47c9-8079-3af13107c4ef.xhtml)的*保护 Azure 远程后端中的状态文件*食谱中，*使用
    Terraform 配置 Azure 基础设施*，我们已经有了一个具体的案例，演示了如何在 Azure 中设置和使用后端（使用 Azure 存储）。然而，本食谱仅适用于拥有
    Azure 订阅的用户。不同类型的后端列在[https://www.terraform.io/docs/backends/types/index.html](https://www.terraform.io/docs/backends/types/index.html)上，其中大多数需要你购买平台或工具。
- en: One of Terraform's primary features is that it allows you to host a Terraform
    state file in a managed service, which is called a `remote` backend.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 的主要功能之一是允许你将 Terraform 状态文件托管在一个托管服务中，这个服务被称为`remote`后端。
- en: In this recipe, we will learn how to use the `remote` backend in Terraform Cloud.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何在 Terraform Cloud 中使用`remote`后端。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The prerequisite for this recipe (as for all the others in this chapter) is
    that you have an account on Terraform Cloud ([http://app.terraform.io/](http://app.terraform.io/))
    and are logged in. Furthermore, you will need to create a new workspace called `demo-app` manually
    from the Terraform Cloud UI by following the documentation at [https://www.terraform.io/docs/cloud/workspaces/creating.html](https://www.terraform.io/docs/cloud/workspaces/creating.html) and
    configuring it without choosing a VCS repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的前提条件（与本章中的所有食谱相同）是你已在Terraform Cloud上拥有一个帐户（[http://app.terraform.io/](http://app.terraform.io/)）并已登录。此外，你需要按照[https://www.terraform.io/docs/cloud/workspaces/creating.html](https://www.terraform.io/docs/cloud/workspaces/creating.html)中的文档，从Terraform
    Cloud UI手动创建一个名为`demo-app`的工作区，并在配置时不选择VCS存储库。
- en: The goal of this recipe is to configure and use the `remote` backend for a simple
    Terraform configuration (for a better understanding that does not depend on a
    cloud provider). Furthermore, the execution of this Terraform configuration will
    be configured in Terraform Cloud for execution in **local** mode; that is, on
    a machine outside Terraform Cloud (which can be a local workstation or a CI/CD
    pipeline agent).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的目标是配置并使用`remote`后端来进行一个简单的Terraform配置（为了更好地理解，这不依赖于云提供商）。此外，这个Terraform配置的执行将在Terraform
    Cloud中配置为**本地**模式执行；即，在Terraform Cloud之外的机器上执行（这可以是本地工作站或CI/CD流水线代理）。
- en: Note that in this recipe, we will be using local mode. In the next recipe, we
    will explain how to execute in **remote **mode.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本食谱中，我们将使用本地模式。在下一个食谱中，我们将解释如何在**远程**模式下执行。
- en: The source code for this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/app).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/app)。
- en: How to do it…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'This recipe will be split into three parts, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将分为以下三部分：
- en: Configuring local mode execution in Terraform Cloud
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Terraform Cloud中配置本地模式执行
- en: Generating a new API token
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成新的API令牌
- en: Configuring and using the `remote` backend
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置并使用`remote`后端
- en: 'For the first part, we will configure local mode execution, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一部分，我们将配置本地模式执行，如下所示：
- en: 'In our new Terraform Cloud workspace (`demo-app`), go to the Settings | General
    tab and change the Execution Mode option to Local:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的新Terraform Cloud工作区（`demo-app`）中，进入设置 | 常规选项卡，将执行模式选项更改为本地模式：
- en: '![](img/9af14b46-4133-4271-af9d-cf9d0a731855.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9af14b46-4133-4271-af9d-cf9d0a731855.png)'
- en: Click the Save settings button to apply these changes.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存设置按钮以应用这些更改。
- en: 'Now, for the second part, we need to generate a new API token to authenticate
    with Terraform Cloud. Follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入第二部分，我们需要生成一个新的API令牌，以便与Terraform Cloud进行身份验证。请按照以下步骤操作：
- en: 'In the Settings tab of the `demoBook` organization, go to the API Tokens tab:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`demoBook`组织的设置选项卡中，进入API令牌选项卡：
- en: '![](img/e201e661-e42e-4f64-932b-b5438375916e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e201e661-e42e-4f64-932b-b5438375916e.png)'
- en: Scroll down to the bottom of this page and click on the Create an authentication
    token button to generate a new API token.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到此页面底部，点击“创建身份验证令牌”按钮以生成新的API令牌。
- en: Keep this generated token safe.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请将此生成的令牌保管好。
- en: 'Finally, the last part is to configure and use the `remote` backend. Follow
    these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一部分是配置并使用`remote`后端。请按照以下步骤操作：
- en: 'In the `main.tf` file of the Terraform configuration, add the following backend
    configuration:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Terraform配置的`main.tf`文件中，添加以下后端配置：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, in the appropriate Terraform CLI configuration folder, which is the home
    directory (documented here: [https://www.terraform.io/docs/commands/cli-config.html](https://www.terraform.io/docs/commands/cli-config.html)),
    create a new file called `terraform.rc` (for Windows OS) or `.terraform.rc` (for
    Linux OS). This will be the Terraform CLI configuration. Inside this file, add
    the following content:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在适当的Terraform CLI配置文件夹中，即主目录（这里有文档说明：[https://www.terraform.io/docs/commands/cli-config.html](https://www.terraform.io/docs/commands/cli-config.html)），创建一个名为`terraform.rc`（适用于Windows操作系统）或`.terraform.rc`（适用于Linux操作系统）的新文件。这将是Terraform
    CLI配置文件。在该文件中，添加以下内容：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the basic workflow Terraform commands with `init`, `plan`, and `apply` from
    your local workstation.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地工作站上执行基本的Terraform工作流命令，包括`init`、`plan`和`apply`。
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它的工作原理是…
- en: In the first part of this recipe, we configured the Terraform execution mode
    of our workspace. In this configuration, we chose local mode, which indicates
    that Terraform will ensure the configuration is installed on a private machine
    (either a local development station or a CI/CD pipeline agent). In this case,
    the created workspace is just used to store the Terraform state.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱的第一部分，我们配置了工作区的 Terraform 执行模式。在这个配置中，我们选择了本地模式，这意味着 Terraform 将确保配置安装在私有机器上（无论是本地开发站还是
    CI/CD 流水线代理）。在这种情况下，创建的工作区仅用于存储 Terraform 状态。
- en: Then, in the second part, we created a token that allows the Terraform binary
    to authenticate with our Terraform Cloud workspace.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第二部分中，我们创建了一个令牌，允许 Terraform 二进制文件与我们的 Terraform Cloud 工作区进行身份验证。
- en: 'In the last part, we wrote the Terraform configuration, which describes the
    settings of our `remote` backend. In this configuration, we used the `remote`
    backend, in which we added the following parameters:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后部分，我们编写了 Terraform 配置，描述了我们的 `remote` 后端的设置。在这个配置中，我们使用了 `remote` 后端，并添加了以下参数：
- en: '`hostname` with the `"app.terraform.io"` value, which is the domain of Terraform
    Cloud'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostname`，值为 `"app.terraform.io"`，它是 Terraform Cloud 的域名'
- en: '`organization`, which contains the `demoBook` name of the organization'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`organization`，它包含了组织的 `demoBook` 名称'
- en: '`workspaces` with the name of the `demo-app` workspace that we created manually
    in the prerequisites of this recipe'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workspaces`，包含我们在本食谱先决条件中手动创建的 `demo-app` 工作区名称'
- en: Then, in *step 2*, we created the Terraform CLI configuration file by adding
    the authentication token that was generated in the second part of this recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在*第 2 步*中，我们通过添加在本食谱第二部分中生成的认证令牌，创建了 Terraform CLI 配置文件。
- en: Finally, in the last step, we executed the Terraform commands workflow.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最后一步中，我们执行了 Terraform 命令工作流。
- en: 'After executing these commands, on the States tab of our workspace, we will
    see that our status file has been created:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，在我们工作区的 States 标签下，我们将看到我们的状态文件已经创建：
- en: '![](img/99304b91-d7b7-4122-99af-756b9474697c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99304b91-d7b7-4122-99af-756b9474697c.png)'
- en: By clicking on this file, you can view its content or download it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击这个文件，你可以查看其内容或下载它。
- en: There's more…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: In this recipe, we learned how to centrally store report files in the Terraform
    Cloud backend.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们学习了如何将报告文件集中存储在 Terraform Cloud 后端。
- en: To do this, we created a workspace manually so that we could configure it and
    choose the local execution mode. In the *Executing Terraform configuration in
    Terraform Cloud* recipe of this chapter, if we want to use remote mode, we simply
    put the name of the workspace in the configuration of the backend, which creates
    it automatically if it does not exist.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们手动创建了一个工作区，以便我们可以配置它并选择本地执行模式。在本章的*在 Terraform Cloud 中执行 Terraform 配置*食谱中，如果我们想使用远程模式，只需将工作区名称放入后端的配置中，如果该工作区不存在，它将自动创建。
- en: Then, we configured the Terraform CLI with the `terraform.rc` file. Another
    solution is to use the `terraform login` command, which creates the token, and
    the `credential.tfrc.json` configuration file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过 `terraform.rc` 文件配置了 Terraform CLI。另一种解决方案是使用 `terraform login` 命令，它会创建令牌，并生成
    `credential.tfrc.json` 配置文件。
- en: 'The following screenshot shows the execution of this command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了这个命令的执行情况：
- en: '![](img/58fa6df4-8306-4e69-aac1-4ae675436a12.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58fa6df4-8306-4e69-aac1-4ae675436a12.png)'
- en: This command is not to be used for automation usage as it requires a web browser
    and manual intervention.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令不适用于自动化使用，因为它需要一个网页浏览器和手动干预。
- en: 'Concerning the token, we created it at the organization level in order to protect
    Terraform''s organization-only executions. To give broader permissions to all
    organizations in this account, you can create a token on the full account in User
    Settings and then in the Tokens tab:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于令牌，我们在组织级别创建了它，以保护仅限于组织的 Terraform 执行。为了给本账户下的所有组织提供更广泛的权限，你可以在用户设置中的账户设置里创建一个令牌，然后在令牌标签中进行操作：
- en: '![](img/6e65e800-a66d-40f0-866f-270512edcef3.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e65e800-a66d-40f0-866f-270512edcef3.png)'
- en: To learn more about the use of API tokens, please refer to the documentation
    at [https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html](https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 API 令牌的使用，请参考[https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html](https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html)文档。
- en: Finally, you can read the documentation at [https://www.terraform.io/docs/cloud/architectural-details/data-security.html](https://www.terraform.io/docs/cloud/architectural-details/data-security.html)
    to learn more about securing data and the Terraform state file, which are stored
    in Terraform Cloud. If you already have Terraform configurations with state files
    that are stored in other types of backends and you would like to migrate them
    to Terraform Cloud, here is the migration documentation: [https://www.terraform.io/docs/cloud/migrate/index.html](https://www.terraform.io/docs/cloud/migrate/index.html).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以阅读以下文档：[https://www.terraform.io/docs/cloud/architectural-details/data-security.html](https://www.terraform.io/docs/cloud/architectural-details/data-security.html)，了解有关在Terraform
    Cloud中存储的数据和Terraform状态文件的安全性。如果你已经有存储在其他类型后端中的Terraform配置和状态文件，并且想将它们迁移到Terraform
    Cloud，请参阅迁移文档：[https://www.terraform.io/docs/cloud/migrate/index.html](https://www.terraform.io/docs/cloud/migrate/index.html)
- en: See also
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation on the `remote` backend is available here: [https://www.terraform.io/docs/backends/types/remote.html](https://www.terraform.io/docs/backends/types/remote.html)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote`后端的文档可以在这里查看：[https://www.terraform.io/docs/backends/types/remote.html](https://www.terraform.io/docs/backends/types/remote.html)'
- en: 'The `terraform login` command documentation is available here: [https://www.terraform.io/docs/commands/login.html](https://www.terraform.io/docs/commands/login.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform login`命令的文档可以在这里查看：[https://www.terraform.io/docs/commands/login.html](https://www.terraform.io/docs/commands/login.html)'
- en: Documentation on the configuration of the Terraform CLI is available here: [https://www.terraform.io/docs/commands/cli-config.html.](https://www.terraform.io/docs/commands/cli-config.html.)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Terraform CLI配置的文档可以在这里查看：[https://www.terraform.io/docs/commands/cli-config.html](https://www.terraform.io/docs/commands/cli-config.html)
- en: Using Terraform Cloud as a private module registry
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Terraform Cloud作为私有模块注册表
- en: In the previous recipe, we learned how to use Terraform Cloud as a remote backend
    that is centralized, secure, and free of charge.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇操作步骤中，我们学习了如何使用Terraform Cloud作为一个集中的、安全的、免费的远程后端。
- en: In this book, we have dedicated [Chapter 5](ddb13a41-5cdd-4931-b38f-d185d3a10c1e.xhtml), *Sharing
    Terraform Configuration with Modules*, to the creation, usage, and sharing of
    Terraform modules. As a reminder, what we studied was publishing modules in the
    Terraform public registry, which is publicly accessible by all Terraform users,
    and sharing Terraform modules privately using a Git repository.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们专门 dedicating [第5章](ddb13a41-5cdd-4931-b38f-d185d3a10c1e.xhtml)，*共享Terraform配置与模块*，介绍了Terraform模块的创建、使用和共享。提醒一下，我们学习的内容是将模块发布到Terraform公共注册表，这是所有Terraform用户都可以公开访问的，并通过Git存储库私密地共享Terraform模块。
- en: Concerning private module sharing, the Git repository system is efficient but
    does not offer a centralized platform for sharing and documenting modules like
    the public registry does. In order to provide companies with a private registry
    of their Terraform modules, HashiCorp has integrated this functionality into Terraform
    Cloud/Enterprise.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 关于私有模块共享，Git存储库系统是高效的，但没有像公共注册表那样提供一个集中平台来共享和记录模块。为了为公司提供私有Terraform模块注册表，HashiCorp已将这一功能集成到Terraform
    Cloud/Enterprise中。
- en: In this recipe, we will learn how to publish and use a Terraform module in the
    private registry of the Terraform Cloud.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个操作步骤中，我们将学习如何在Terraform Cloud的私有注册表中发布和使用Terraform模块。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to publish a module in Terraform Registry, you'll need to store your
    module code in a VCS file that is supported by Terraform Cloud. The list of supported
    file types can be found at [https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Terraform注册表中发布模块，你需要将模块代码存储在Terraform Cloud支持的VCS文件中。支持的文件类型列表可以在这里找到：[https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html)
- en: To start this recipe, in the Settings section of the Terraform Cloud organization,
    we need to create a connection to the VCS provider that contains the Terraform
    configuration, as described in the documentation at [https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个操作步骤，在Terraform Cloud组织的**设置**部分，我们需要创建与包含Terraform配置的VCS提供商的连接，具体步骤可参考文档：[https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html)
- en: In our scenario, we will use the GitHub VCS, which contains a `terraform-azurerm-webapp`
    repository (which creates a Service Plan, an App Service instance, and an Application Insights
    in Azure). To get this repository, you can fork [https://github.com/mikaelkrief/terraform-azurerm-webapp](https://github.com/mikaelkrief/terraform-azurerm-webapp).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的场景中，我们将使用包含`terraform-azurerm-webapp`仓库的 GitHub VCS（该仓库在 Azure 中创建一个服务计划、一个应用服务实例和一个应用程序洞察）。要获取此仓库，您可以
    fork [https://github.com/mikaelkrief/terraform-azurerm-webapp](https://github.com/mikaelkrief/terraform-azurerm-webapp)。
- en: 'In addition, as we studied in the *Sharing Terraform module using GitHub* recipe
    in [Chapter 5](ddb13a41-5cdd-4931-b38f-d185d3a10c1e.xhtml), *Sharing Terraform
    Configuration with Modules*, you need to create a Git tag in this repository that
    contains the version number of the module. For this recipe, we will create a `v1.0.0`
    tag, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们在[第5章](ddb13a41-5cdd-4931-b38f-d185d3a10c1e.xhtml)的*使用 GitHub 分享 Terraform
    模块*配方中研究的那样，*使用模块共享 Terraform 配置*，你需要在此仓库中创建一个 Git 标签，该标签包含模块的版本号。对于这个配方，我们将创建一个`v1.0.0`标签，如下图所示：
- en: '![](img/8a1a183b-6730-42ad-b254-2443e7fdb302.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a1a183b-6730-42ad-b254-2443e7fdb302.png)'
- en: 'To integrate between Terraform Cloud and GitHub, execute the process documented
    here: [https://www.terraform.io/docs/cloud/vcs/github-app.html](https://www.terraform.io/docs/cloud/vcs/github-app.html).
    At the end of this integration, we get the following screen under Settings | VCS
    Providers:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Terraform Cloud 和 GitHub 之间进行集成，请执行此处文档中描述的过程：[https://www.terraform.io/docs/cloud/vcs/github-app.html](https://www.terraform.io/docs/cloud/vcs/github-app.html)。完成此集成后，我们将在“设置
    | VCS 提供商”下看到以下屏幕：
- en: '![](img/57257202-73e2-453d-a5b3-9fdb753d18ce.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57257202-73e2-453d-a5b3-9fdb753d18ce.png)'
- en: Our organization now has a connection to the required GitHub account and we
    can start publishing the module in Terraform Cloud.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组织现在已经与所需的 GitHub 账户建立了连接，可以开始在 Terraform Cloud 中发布模块。
- en: How to do it…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To publish a Terraform module in Terraform Cloud''s private registry, perform
    the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Terraform 模块发布到 Terraform Cloud 的私人注册表中，请执行以下步骤：
- en: 'In our Terraform Cloud organization, click on the Modules menu, which is located
    in the top bar menu:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 Terraform Cloud 组织中，点击位于顶部菜单栏中的“模块”菜单：
- en: '![](img/cea0efd3-d8e5-4eeb-9e6d-71392fbf54ad.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cea0efd3-d8e5-4eeb-9e6d-71392fbf54ad.png)'
- en: 'To add the module, click on the Add module button:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加模块，请点击“添加模块”按钮：
- en: '![](img/b7b7f06b-2c97-4396-85bc-8ea75c941d09.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7b7f06b-2c97-4396-85bc-8ea75c941d09.png)'
- en: 'Then, in the next layout, in the first step of the wizard, choose GitHub as
    the VCS provider, which we integrated as part of the requirements for this recipe:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在下一个布局中，在向导的第一步中选择 GitHub 作为 VCS 提供商，这是我们在本配方要求中集成的部分：
- en: '![](img/5cc76d1d-f121-409e-9b06-25062ecb67c1.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cc76d1d-f121-409e-9b06-25062ecb67c1.png)'
- en: 'In the second step of the wizard, choose the repository that contains the Terraform
    module configuration:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的第二步中，选择包含 Terraform 模块配置的仓库：
- en: '![](img/7d2be4bc-69da-4fc6-8f06-a43ccde44b07.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d2be4bc-69da-4fc6-8f06-a43ccde44b07.png)'
- en: 'Finally, in the last step of the wizard, publish the module by clicking on
    the Publish module button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在向导的最后一步，通过点击“发布模块”按钮来发布模块：
- en: '![](img/d6ba232f-7a68-4a91-84fa-18d7624f1411.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6ba232f-7a68-4a91-84fa-18d7624f1411.png)'
- en: How it works…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理……
- en: To publish a module in the private registry of Terraform, you just have to follow
    the steps proposed by the wizard, which consist of choosing a VCS provider and
    then selecting the repository that contains the Terraform configuration of the
    module so that it can be published. After doing this, details about the module
    will be displayed in the layout of the public registry. In the center of this
    page, you will be able to see the contents of the `Readme.md` file, while on the
    right-hand side, you will be able to see the technical information about the use
    of this module.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Terraform 的私人注册表中发布模块，您只需按照向导提出的步骤操作，步骤包括选择一个 VCS 提供商，然后选择包含模块的 Terraform
    配置的仓库，以便它可以被发布。完成后，模块的详细信息将在公共注册表的布局中显示。在页面的中央，您将看到`Readme.md`文件的内容，而在右侧，您将看到关于使用此模块的技术信息。
- en: There's more…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Once this module has been published in this registry, you can use it in a Terraform
    configuration. If you''re using Terraform Cloud in local execution mode, you must
    configure the Terraform CLI with the authentication token in the `terraform.rc`
    file, as described in the previous recipe. Then, you need to use this module in
    a Terraform configuration and write the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦该模块在此注册表中发布，您就可以在 Terraform 配置中使用它。如果您在本地执行模式下使用 Terraform Cloud，则必须按照前面的配方在
    `terraform.rc` 文件中配置 Terraform CLI 的身份验证令牌。然后，您需要在 Terraform 配置中使用此模块，并编写以下内容：
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this configuration, the `source` property is the module identifier in the
    Terraform Cloud registry, while the `version` property corresponds to the Git
    tag that''s been set in the repository. After doing this, you can select what
    version you wish to use from the Versions drop-down list:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，`source` 属性是 Terraform Cloud 注册表中的模块标识符，而 `version` 属性对应于在代码库中设置的 Git
    标签。完成此操作后，您可以从版本下拉列表中选择希望使用的版本：
- en: '![](img/6ab8d8d6-c982-4d0d-b3a1-2773bfd828f5.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ab8d8d6-c982-4d0d-b3a1-2773bfd828f5.png)'
- en: If we change the Terraform configuration of the module and we want to upgrade
    its version, we just have to add a Git tag to this repository, along with the
    desired version. By doing this, the module will be automatically updated in the
    Terraform Cloud registry.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更改了模块的 Terraform 配置并希望升级其版本，只需在此代码库中添加一个 Git 标签，并设置所需的版本。通过这样做，模块将在 Terraform
    Cloud 注册表中自动更新。
- en: In addition, if your modules have been published in this private registry, you
    can generate the Terraform configuration that calls them using the design configuration feature
    of Terraform Cloud. You can find out more about this at [https://www.terraform.io/docs/cloud/registry/design.html](https://www.terraform.io/docs/cloud/registry/design.html).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您的模块已发布在此私有注册表中，您可以使用 Terraform Cloud 的设计配置功能生成调用这些模块的 Terraform 配置。您可以在此了解更多：[https://www.terraform.io/docs/cloud/registry/design.html](https://www.terraform.io/docs/cloud/registry/design.html)。
- en: Finally, please note that if you have several organizations in Terraform Cloud
    and you want to use the same modules in all of them, you will have to publish
    these modules in each of your organizations. As for upgrading their versions,
    this will be done automatically for each organization.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，如果您在 Terraform Cloud 中有多个组织，并且希望在所有组织中使用相同的模块，您必须在每个组织中发布这些模块。至于升级模块的版本，这将在每个组织中自动完成。
- en: See also
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Documentation regarding privately registering modules in Terraform Cloud is
    available here: [https://www.terraform.io/docs/cloud/registry/index.html](https://www.terraform.io/docs/cloud/registry/index.html).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在 Terraform Cloud 中私有注册模块的文档可以在此查看：[https://www.terraform.io/docs/cloud/registry/index.html](https://www.terraform.io/docs/cloud/registry/index.html)。
- en: Executing Terraform configuration remotely in Terraform Cloud
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Terraform Cloud 中远程执行 Terraform 配置
- en: In the previous two recipes, we studied the use of Terraform Cloud with local
    runtime settings. This configuration indicates that the Terraform binary that
    applies the Terraform configuration is installed on a machine outside the Terraform
    Cloud platform. This machine is therefore private and can be a development workstation
    or a machine that serves as an agent for a CI/CD pipeline (such as on an Azure
    pipeline agent or a Jenkins node).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个配方中，我们研究了使用本地运行时设置的 Terraform Cloud。此配置表明，应用 Terraform 配置的 Terraform 二进制文件安装在
    Terraform Cloud 平台外部的机器上。因此，这台机器是私有的，可以是开发工作站或作为 CI/CD 管道代理的机器（例如在 Azure 管道代理或
    Jenkins 节点上）。
- en: One of the great advantages of Terraform Cloud is its ability to execute Terraform
    configurations directly within this platform. This feature, called **remote operations**,
    makes it possible to have free Terraform configuration execution pipelines without
    having to install, configure, and maintain VMs that serve as agents. In addition,
    it provides a shared Terraform execution interface for all the members of the
    organization.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform Cloud 的一个重要优势是能够直接在此平台内执行 Terraform 配置。此功能称为**远程操作**，使得可以在不需要安装、配置和维护作为代理的虚拟机的情况下，免费运行
    Terraform 配置执行管道。此外，它为组织内的所有成员提供了共享的 Terraform 执行接口。
- en: In this recipe, we will look at the steps involved in running a Terraform configuration
    in Terraform Cloud using the UI workflow.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将查看使用 UI 工作流在 Terraform Cloud 中运行 Terraform 配置的步骤。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Terraform configuration source code that we will be using in this recipe
    can be found at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote).
    This configuration creates a Resource Group and an App Service in Azure. If you
    want to use this Terraform configuration, you will need to make a fork of this
    repository. This configuration also uses a `terraform-azurerm-webapp` Terraform module,
    which has been published in the private registry of our Terraform Cloud organization.
    For more information about publishing a module in the private registry, see the
    previous recipe, *Using Terraform Cloud as a private module registry*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本配方中使用的 Terraform 配置源代码可以在 [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote)
    找到。这个配置将在 Azure 中创建一个资源组和一个应用服务。如果你想使用这个 Terraform 配置，你需要对这个仓库进行分叉。该配置还使用了 `terraform-azurerm-webapp`
    Terraform 模块，这个模块已发布在我们 Terraform Cloud 组织的私有注册表中。有关如何在私有注册表中发布模块的更多信息，请参见前一个配方，*将
    Terraform Cloud 用作私有模块注册表*。
- en: Since, in this Terraform configuration, we will be creating Azure resources,
    we need to create an Azure Service Principal that has sufficient permissions in
    the subscription. For more information on Azure Service Principals and the authentication
    of Terraform to Azure, see the *Protecting the Azure credential provider* recipe in
    [Chapter 6](d054157b-d534-47c9-8079-3af13107c4ef.xhtml), *Provisioning Azure Infrastructure
    with Terraform*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在这个 Terraform 配置中，我们将创建 Azure 资源，因此我们需要创建一个具有足够权限的 Azure 服务主体，该服务主体必须在订阅中具有适当权限。有关
    Azure 服务主体和 Terraform 如何验证 Azure 的更多信息，请参见 [第 6 章](d054157b-d534-47c9-8079-3af13107c4ef.xhtml)
    中的 *保护 Azure 凭证提供者* 配方，*使用 Terraform 配置 Azure 基础架构*。
- en: Also, since we will be exposing a Terraform configuration in GitHub, we will
    need to add the GitHub VCS provider, as explained in the documentation here: [https://www.terraform.io/docs/cloud/vcs/github-app.html](https://www.terraform.io/docs/cloud/vcs/github-app.html).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于我们将公开一个 GitHub 中的 Terraform 配置，我们需要添加 GitHub VCS 提供商，正如文档中所解释的那样：[https://www.terraform.io/docs/cloud/vcs/github-app.html](https://www.terraform.io/docs/cloud/vcs/github-app.html)。
- en: Finally, all the steps of this recipe will be done in the Terraform Cloud web
    interface.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，本配方的所有步骤将在 Terraform Cloud Web 界面中完成。
- en: How to do it…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Before we execute the Terraform configuration, we need to create and configure
    a new workspace. Follow these steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 Terraform 配置之前，我们需要创建并配置一个新的工作区。按照以下步骤操作：
- en: Inside the Workspace section of our organization, click on the New organization
    button to create a new organization.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们组织的工作区部分，点击“新建组织”按钮以创建一个新组织。
- en: 'In the first step of the wizard, choose the VCS provider we registered in the
    requirements. Here, we will choose our GitHub provider:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的第一步中，选择我们在需求中注册的 VCS 提供商。在这里，我们将选择 GitHub 提供商：
- en: '![](img/0b0e1220-84b7-4bcf-afa5-79bc6be8c03d.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b0e1220-84b7-4bcf-afa5-79bc6be8c03d.png)'
- en: 'Then, in the second step of this wizard, select the GitHub repository that
    contains the Terraform configuration so that we can execute it in Terraform Cloud:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在向导的第二步中，选择包含 Terraform 配置的 GitHub 仓库，以便我们可以在 Terraform Cloud 中执行它：
- en: '![](img/14df9a6f-c6fa-421f-8fee-6a721937e02b.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14df9a6f-c6fa-421f-8fee-6a721937e02b.png)'
- en: 'Finally, in the last step of the wizard, configure this workspace by specifying
    the mandatory parameter, which is the name of the workspace. This is `demo-app-remote`
    in our case:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在向导的最后一步中，通过指定强制参数来配置此工作区，该参数是工作区的名称。在我们的例子中，它是 `demo-app-remote`：
- en: '![](img/44cf213d-0db1-4e55-bc21-af7d677cff98.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44cf213d-0db1-4e55-bc21-af7d677cff98.png)'
- en: 'In the optional Advanced options tab, set the folder path of the Terraform
    configuration (leave this blank if the Terraform configuration is in the root
    of your repository). We can also fill in the Automatic Run Triggering and VCS
    branch parameters so that they can be run (we leave the master branch empty):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可选的高级选项标签页中，设置 Terraform 配置的文件夹路径（如果 Terraform 配置位于仓库的根目录，则留空）。我们还可以填写自动运行触发器和
    VCS 分支参数，以便它们能够运行（我们将 master 分支留空）：
- en: '![](img/7cfb421f-a021-4884-95e7-718f680d8334.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cfb421f-a021-4884-95e7-718f680d8334.png)'
- en: Finally, click on the Create workspace button to finalize the creation of the
    workspace.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击“创建工作区”按钮以完成工作区的创建。
- en: 'Now that we''ve created the workspace, because we''re deploying resources in
    Azure, we need to add the four Azure authentication environment variables to the
    workspace variables settings. Follow these steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经创建了工作区，因我们在 Azure 中部署资源，需要将四个 Azure 身份验证环境变量添加到工作区变量设置中。请按照以下步骤操作：
- en: 'Click on the Configure variables button:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“配置变量”按钮：
- en: '![](img/b0749a08-0723-4911-8a4f-5d580c3a2db4.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0749a08-0723-4911-8a4f-5d580c3a2db4.png)'
- en: 'Then, in the Environment Variables section, add our four Terraform Azure provider
    environment variables, as shown in the following screenshot:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“环境变量”部分，添加我们的四个 Terraform Azure 提供程序环境变量，如下截图所示：
- en: '![](img/a342a133-9e33-49ea-9d2f-22b29ecdba6b.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a342a133-9e33-49ea-9d2f-22b29ecdba6b.png)'
- en: Now that we've configured our workspace, we can execute the Terraform configuration
    inside Terraform Cloud.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好工作区，可以在 Terraform Cloud 中执行 Terraform 配置。
- en: 'To run the Terraform configuration remotely in Terraform Cloud, perform the
    following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Terraform Cloud 中远程执行 Terraform 配置，请按照以下步骤操作：
- en: 'To trigger the execution of the Terraform configuration, click on the Queue
    plan button, enter a reason for doing this, and confirm this by clicking on the Queue
    plan button:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要触发 Terraform 配置的执行，点击“队列计划”按钮，输入执行原因，并点击“队列计划”按钮确认：
- en: '![](img/67d01631-33c5-433d-8b78-5c64b122b033.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67d01631-33c5-433d-8b78-5c64b122b033.png)'
- en: 'Terraform Cloud will launch a new execution for this Terraform configuration.
    By running the `terraform plan` command, we will be able to see the logs for this
    execution:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform Cloud 将启动一个新的执行任务来执行此 Terraform 配置。通过运行 `terraform plan` 命令，我们将能够看到此执行的日志：
- en: '![](img/3a2f7ef7-5e5b-436b-bdae-893f82027b6d.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a2f7ef7-5e5b-436b-bdae-893f82027b6d.png)'
- en: After executing `plan`, Terraform Cloud expects the user to confirm this before
    the changes are applied.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`plan`后，Terraform Cloud 会要求用户确认此操作，才会应用更改。
- en: 'If we agree to the preview changes, we can confirm these changes by clicking
    on the Confirm & Apply button:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们同意预览中的更改，可以通过点击“确认并应用”按钮来确认这些更改：
- en: '![](img/7209e9c5-8d98-49d1-88a2-2682d9d7c5ce.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7209e9c5-8d98-49d1-88a2-2682d9d7c5ce.png)'
- en: 'Add some comments and click on the Confirm Plan button:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一些评论，然后点击“确认计划”按钮：
- en: '![](img/23353f4a-932d-4697-b1a3-321d2ba28c94.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23353f4a-932d-4697-b1a3-321d2ba28c94.png)'
- en: 'Once finished, the result of executing the plan will be provided:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，执行计划的结果将会提供：
- en: '![](img/2aed3cc2-b4b2-4bbe-9b9c-354bdc750415.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aed3cc2-b4b2-4bbe-9b9c-354bdc750415.png)'
- en: How it works…
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we configured a workspace in Terraform Cloud in order to run
    a Terraform configuration that's in a GitHub repository directly in an instance
    managed by Terraform Cloud.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们配置了一个 Terraform Cloud 工作区，以便在 Terraform Cloud 管理的实例中直接运行存储在 GitHub 仓库中的
    Terraform 配置。
- en: In the middle of this configuration, before executing the Terraform configuration,
    we performed the Azure environment variables configuration, which is an optional
    step and depends on the resources and cloud providers you wish to manage.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这项配置的中间，执行 Terraform 配置之前，我们完成了 Azure 环境变量配置，这是一个可选步骤，取决于你希望管理的资源和云提供商。
- en: There's more…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'In this recipe, we learned how to run the `plan` and `apply` Terraform Cloud
    variables directly using the web interface of this platform. In the workspace
    settings, you can also configure whether you want to apply the plan manually (that
    is, with a confirmation, like in our recipe) or automatically. You can also choose
    the version of the Terraform binary you wish to use (by default, it uses the latest
    stable version that can found at the time of the workspace''s creation; beta versions
    are not taken into account):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们学习了如何直接通过此平台的 Web 界面运行 `plan` 和 `apply` Terraform Cloud 变量。在工作区设置中，你还可以配置是否希望手动应用计划（即像我们教程中的确认步骤）或自动应用。你还可以选择希望使用的
    Terraform 二进制版本（默认情况下，它会使用在工作区创建时找到的最新稳定版本；beta 版本不予考虑）：
- en: '![](img/89a0eace-93ad-4193-bf7b-c821b23294eb.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89a0eace-93ad-4193-bf7b-c821b23294eb.png)'
- en: 'You can also destroy all the resources that have been provisioned using the
    Destruction and Deletion feature, which is accessible in the Settings | Destruction
    and Deletion menu, and then click on the Queue destroy plan button:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用“销毁与删除”功能销毁所有已配置的资源，该功能可以在“设置 | 销毁与删除”菜单中访问，然后点击“队列销毁计划”按钮：
- en: '![](img/2a5e295a-71fb-479c-8320-a997c3733de8.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a5e295a-71fb-479c-8320-a997c3733de8.png)'
- en: 'In addition, as you may have noticed, by running the Terraform configuration
    in Terraform Cloud using the UI, we did not need to configure the `remote` backend
    information for the state file, as we discussed in the *Using a remote backend
    in Terraform Cloud* recipe of this chapter. In our case, the configuration of
    the Terraform state file is integrated with the workspace. In the States tab,
    we''ll notice the presence of the Terraform state file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如你可能已经注意到的，通过使用UI在Terraform Cloud中运行Terraform配置时，我们不需要为状态文件配置`remote`后端信息，正如我们在本章的*使用Terraform
    Cloud中的远程后端*一节中讨论的那样。在我们的案例中，Terraform状态文件的配置与工作区集成。在States选项卡中，我们将看到Terraform状态文件的存在：
- en: '![](img/4a6ec36c-334f-46e9-b5d3-c68be74849d7.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a6ec36c-334f-46e9-b5d3-c68be74849d7.png)'
- en: 'Moreover, if you are in a development context and want to check the development
    before committing to the repository, you can still use this remote mode of Terraform
    execution to make a plan. This is done by controlling this execution, which takes
    place in Terraform Cloud using your Terraform binary (or CLI). To do this, simply
    add the configuration of the `remote` backend, as in the *Using a remote backend
    in Terraform Cloud* recipe of this chapter, by using the name of the workspace
    we created in the first step of that recipe, which corresponds to the following
    code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你处于开发环境中并希望在提交到仓库之前检查开发情况，你仍然可以使用Terraform执行的远程模式来制定计划。这是通过控制在Terraform
    Cloud中执行的过程来实现的，你可以使用Terraform二进制文件（或CLI）来完成。要做到这一点，只需像本章中的*使用Terraform Cloud中的远程后端*一节那样，添加`remote`后端的配置，并使用我们在该节第一步中创建的工作区名称，对应于以下代码：
- en: '[PRE3]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, on the development station, execute the `terraform plan` command, as
    shown in the following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在开发站点上执行`terraform plan`命令，如下图所示：
- en: '![](img/2edbecc7-028d-4a41-b089-9f6a10b86ec2.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2edbecc7-028d-4a41-b089-9f6a10b86ec2.png)'
- en: During this execution, your Terraform CLI will create a configuration package
    and upload it to the Terraform Cloud workspace. The CLI triggers the Terraform
    Cloud CLI to run Terraform on the uploaded package. Finally, the output of the
    `plan` command is also available in the command-line terminal. Please also note
    that, in this case, you do not need to set the environment variables locally since
    they are already configured in the workspace.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在此执行过程中，你的Terraform CLI将创建一个配置包并将其上传到Terraform Cloud工作区。CLI触发Terraform Cloud
    CLI在上传的包上运行Terraform。最后，`plan`命令的输出也可以在命令行终端中查看。请注意，在这种情况下，你不需要在本地设置环境变量，因为它们已经在工作区中配置好了。
- en: In order to ensure that the changes are applied in one place, you can't run
    the `terraform apply` command on a workspace that is connected to a VCS. However,
    if your workspace is not connected to a VCS, then you can also execute the `apply` command from
    your local CLI.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保更改只应用在一个地方，你不能在连接到VCS的工作区上运行`terraform apply`命令。然而，如果你的工作区没有连接到VCS，你可以从本地CLI执行`apply`命令。
- en: Finally, if your Terraform configuration includes the provisioning `local-exec`
    (which we studied in the *Executing local programs with Terraform* recipe in [Chapter
    2](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml), *Writing Terraform Configuration*)
    and, in its command, it uses a third-party tool, you will have to ensure that
    this tool is already present or installed on the Terraform Cloud agent, which
    will execute the Terraform binary. For more information about additional third-party
    tools in the execution of Terraform Cloud, I recommend reading the documentation
    available at [https://www.terraform.io/docs/cloud/run/install-software.html](https://www.terraform.io/docs/cloud/run/install-software.html).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你的Terraform配置包含了`local-exec`（我们在[第2章](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml)的*使用Terraform执行本地程序*一节中研究过），并且在其命令中使用了第三方工具，你需要确保该工具已经存在或安装在执行Terraform二进制文件的Terraform
    Cloud代理上。关于在Terraform Cloud执行中的其他第三方工具的更多信息，建议阅读[https://www.terraform.io/docs/cloud/run/install-software.html](https://www.terraform.io/docs/cloud/run/install-software.html)上的文档。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation on remote execution in Terraform Cloud is available here: [https://www.terraform.io/docs/cloud/run/index.html](https://www.terraform.io/docs/cloud/run/index.html).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Terraform Cloud中远程执行的文档可以在此处查看：[https://www.terraform.io/docs/cloud/run/index.html](https://www.terraform.io/docs/cloud/run/index.html)。
- en: The documentation on using the CLI with remote execution is available here: [https://www.terraform.io/docs/cloud/run/cli.html](https://www.terraform.io/docs/cloud/run/cli.html).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CLI进行远程执行的文档可以在此查看：[https://www.terraform.io/docs/cloud/run/cli.html](https://www.terraform.io/docs/cloud/run/cli.html)。
- en: Automating Terraform Cloud using APIs
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API自动化Terraform Cloud
- en: In the previous recipes, we learned how to use the Terraform Cloud platform
    to store Terraform state files in a `remote` backend. Then, we used Terraform
    Cloud as a private registry of modules and learned how to run Terraform configurations
    remotely in Terraform Cloud.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们学习了如何使用Terraform Cloud平台将Terraform状态文件存储在`remote`后端。然后，我们使用Terraform
    Cloud作为模块的私有注册表，并学习了如何在Terraform Cloud中远程运行Terraform配置。
- en: All these actions were mainly done via the Terraform Cloud UI web interface.
    In the *There's more...* section of the previous recipe, we discussed that it
    is also possible to use the Terraform CLI locally to run Terraform remotely.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些操作主要通过Terraform Cloud UI网页界面完成。在前一个配方的*更多...*部分，我们讨论了也可以使用Terraform CLI本地运行Terraform远程操作。
- en: 'In a company, we need to automate all of these actions for the following reasons:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司中，我们需要自动化所有这些操作，原因如下：
- en: The use of the UI is ergonomic but requires a lot of manual actions, which,
    with many projects, can be very time- and resource-consuming.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI的使用虽然人性化，但需要大量手动操作，在多个项目中，这可能会非常耗时且消耗资源。
- en: In Terraform Cloud, the execution workflow in remote mode is fixed with the
    execution of the `plan` command, as well as the application. It isn't possible
    to add other actions (which we have studied in this book) such as the execution
    of integration tests upstream. Due to this, it isn't possible to customize the
    workflow with the business needs of the company.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Terraform Cloud中，远程模式下的执行工作流程是固定的，包括执行`plan`命令以及应用操作。无法添加其他操作（如本书中研究过的上游集成测试执行）。因此，无法根据公司的业务需求定制工作流程。
- en: Due to the need for automation and customization, HashiCorp has published APIs
    that allow Terraform Cloud to be managed as it should be with the UI.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于自动化和定制化的需求，HashiCorp发布了API，允许像使用UI一样管理Terraform Cloud。
- en: In this recipe, we will look at automating the actions of Terraform Cloud using
    its APIs.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将通过API来自动化Terraform Cloud的操作。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before starting, it is good to recall the Terraform Cloud workflow, which is
    as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，回顾一下Terraform Cloud的工作流程是非常有帮助的，流程如下：
- en: Write the Terraform configuration, then commit it to a VCS repository (such
    as Git).
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Terraform配置，然后将其提交到VCS代码库（如Git）。
- en: In Terraform Cloud, the workspace retrieves this Terraform configuration and
    executes the dry run using the `terraform plan` command.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Terraform Cloud中，工作区会检索此Terraform配置并使用`terraform plan`命令执行干运行。
- en: In manual mode, if the user confirms the plan, Terraform Cloud triggers the
    application and applies the changes to the infrastructure.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在手动模式下，如果用户确认计划，Terraform Cloud会触发应用并将更改应用到基础设施中。
- en: In automatic mode (auto-apply), the changes are applied automatically after
    the `plan` command has been issued.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动模式（auto-apply）下，`plan`命令执行后，变更会自动应用。
- en: In this recipe, we will use the same scenario and Terraform configuration that
    we used for the previous recipe, except we will use scripts that call the Terraform
    Cloud APIs.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用与前一个配方相同的场景和Terraform配置，唯一不同的是我们将使用调用Terraform Cloud API的脚本。
- en: 'As a prerequisite, however, you will need to create an API token in your Terraform
    Cloud user account settings. This will be used for authentication:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，作为先决条件，你需要在Terraform Cloud用户账户设置中创建一个API令牌，用于身份验证：
- en: '![](img/f4099a5d-54c6-4251-ba65-024cde5510d6.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4099a5d-54c6-4251-ba65-024cde5510d6.png)'
- en: A run is triggered via an API by using a user API token, not an organization
    token.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通过API触发运行时，使用的是用户API令牌，而非组织令牌。
- en: In regard to the scripting language used in this recipe, we will use PowerShell.
    However, you can adapt this and make use of your usual programming languages (shell,
    Python, C#, and so on).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中使用的脚本语言为PowerShell。不过，你可以根据需要使用常用的编程语言（如shell、Python、C#等）。
- en: The source code for this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/api](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/api).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方的源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/api](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/api)获取。
- en: How to do it…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现……
- en: 'To automate Terraform Cloud with an API, perform the following steps inside
    a new folder:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过API自动化Terraform Cloud，请在新文件夹中执行以下步骤：
- en: 'Create a JSON file named `workspace.json`. This will contain the definition
    of the workspace we will be creating. Insert the following content:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`workspace.json`的JSON文件。此文件将包含我们将要创建的工作区的定义。插入以下内容：
- en: '[PRE4]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To understand how to get `oauth-token-id`, read the documentation available
    at [https://www.terraform.io/docs/cloud/api/oauth-tokens.html](https://www.terraform.io/docs/cloud/api/oauth-tokens.html).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何获取`oauth-token-id`，请阅读[https://www.terraform.io/docs/cloud/api/oauth-tokens.html](https://www.terraform.io/docs/cloud/api/oauth-tokens.html)上的文档。
- en: 'Create a PowerShell script called `tfcloud-workspaces.ps1` that contains the
    following content:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tfcloud-workspaces.ps1`的PowerShell脚本，包含以下内容：
- en: '[PRE5]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The complete source code of this script is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-workspaces.ps1](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-workspaces.ps1).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本的完整源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-workspaces.ps1](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-workspaces.ps1)找到。
- en: 'In a PowerShell terminal, run the following command to create a workspace:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PowerShell终端中，运行以下命令以创建工作区：
- en: '[PRE6]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At the end of this execution, the script will display the ID for the created
    workspace:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行结束时，脚本将显示创建的工作区ID：
- en: '![](img/d365119d-9089-4c60-ae34-a5772e113ad8.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d365119d-9089-4c60-ae34-a5772e113ad8.png)'
- en: 'Create another JSON file called `variables.json` that will contain the definition
    of the environment variables to create. Insert the following content:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`variables.json`的JSON文件，包含要创建的环境变量的定义。插入以下内容：
- en: '[PRE7]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The complete source code for this JSON script is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/variables.json](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/variables.json).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 该JSON脚本的完整源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/variables.json](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/variables.json)找到。
- en: 'Create a PowerShell script called `tfcloud-variables.ps1` that contains the
    following content:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tfcloud-variables.ps1`的PowerShell脚本，包含以下内容：
- en: '[PRE8]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The complete source code for this script is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-variables.ps1](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-variables.ps1).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本的完整源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-variables.ps1](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/api/tfcloud-variables.ps1)找到。
- en: 'In PowerShell, run the preceding script to create environment variables in
    the workspaces we''ve created with the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PowerShell中，运行上述脚本以创建我们在工作区中定义的环境变量，使用以下命令：
- en: '[PRE9]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To trigger a new execution of the Terraform configuration, create a JSON file
    called `run.json` that contains the definition of the queue. Add the following
    content:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了触发Terraform配置的新的执行，创建一个名为`run.json`的JSON文件，包含队列的定义。添加以下内容：
- en: '[PRE10]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a PowerShell script called `tfcloud-run.ps1` that contains the following
    content:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tfcloud-run.ps1`的PowerShell脚本，包含以下内容：
- en: '[PRE11]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In PowerShell, run the following command to queue a new Terraform `run`:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PowerShell中，运行以下命令以排队新的Terraform `run`：
- en: '[PRE12]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this recipe, we automated the implementation of a Terraform workflow in
    three steps, as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们通过三步自动化了Terraform工作流的实现，具体如下：
- en: Creating and configuring a workspace
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和配置工作区
- en: Creating environment variables in this workspace
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此工作区中创建环境变量
- en: Triggering a Terraform `run` in the Terraform configuration defined in this
    workspace
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此工作区中触发Terraform配置的`run`
- en: 'From *steps 1* to *3*, we used the API to create a workspace. To do this, we
    created a file called `workspace.json` that contains the body (payload) that will
    be sent as a parameter to the API. In this file, we defined the following properties:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 从*步骤 1*到*步骤 3*，我们使用API创建了一个工作区。为此，我们创建了一个名为`workspace.json`的文件，其中包含将作为参数发送到API的主体（payload）。在此文件中，我们定义了以下属性：
- en: '`name`: The name of the workspace to create.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：要创建的工作区名称。'
- en: '`working-directory`: The directory of the repository that contains the Terraform
    configuration.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`working-directory`：包含Terraform配置的仓库目录。'
- en: '`auto-apply`: This indicates that the runs will be done automatically after
    the plan, without the user having to review this plan (optional property).'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-apply`：这表示在计划之后，运行将自动执行，而无需用户手动审查该计划（可选属性）。'
- en: '`vcs-repo`: This block contains information about the VCS provider we configured
    in the organization, which is detailed here: [https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html).
    The `oauth-token-id` property is obtained either by the VCS provider''s screen
    or via an API, as detailed here: [https://www.terraform.io/docs/cloud/api/oauth-clients.html](https://www.terraform.io/docs/cloud/api/oauth-clients.html).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vcs-repo`：该块包含我们在组织中配置的VCS提供者的信息，详情请见：[https://www.terraform.io/docs/cloud/vcs/index.html](https://www.terraform.io/docs/cloud/vcs/index.html)。`oauth-token-id`属性可以通过VCS提供者的界面或通过API获取，具体细节请见：[https://www.terraform.io/docs/cloud/api/oauth-clients.html](https://www.terraform.io/docs/cloud/api/oauth-clients.html)。'
- en: Then, we wrote and executed the PowerShell script that calls the workspace creation
    API. In this script, we defined the user's API token and the name of the organization
    as a variable before calling the workspace creation API.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编写并执行了调用工作区创建API的PowerShell脚本。在这个脚本中，我们定义了用户的API令牌和组织的名称作为变量，然后调用了工作区创建API。
- en: The documentation for the workspace API is available here: [https://www.terraform.io/docs/cloud/api/workspaces.html](https://www.terraform.io/docs/cloud/api/workspaces.html).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 工作区API的文档可以在此查看：[https://www.terraform.io/docs/cloud/api/workspaces.html](https://www.terraform.io/docs/cloud/api/workspaces.html)。
- en: 'At the end of its execution, this script displays the ID of the created workspace,
    which will have to be preserved so that we can continue making API calls. In the
    web interface of Terraform Cloud, we will be able to view this new workspace:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行结束时，该脚本会显示创建的工作区ID，必须保留此ID以便我们可以继续进行API调用。在Terraform Cloud的Web界面中，我们将能够查看到这个新的工作区：
- en: '![](img/f4dbd97d-72d6-44eb-8ae2-b1f2034a4401.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4dbd97d-72d6-44eb-8ae2-b1f2034a4401.png)'
- en: 'Then, from *steps 4* to *6*, we used the API to create the environment variables
    in this new workspace. To do this, we created a `variables.json` file that contains
    the four variables of the Azure Service Principal, as well as their body, which
    will be processed so that the API parameters for its payload are sent to the API.
    In this file, we defined the following properties for each of the variables:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，从*步骤4*到*步骤6*，我们使用API在这个新工作区中创建了环境变量。为此，我们创建了一个`variables.json`文件，该文件包含了Azure
    Service Principal的四个变量以及它们的主体内容，这些内容将被处理，以便API的有效载荷参数被发送到API。在该文件中，我们为每个变量定义了以下属性：
- en: '`name`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`value`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`'
- en: '`category`: `env` (to define it as an environment variable)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category`: `env`（定义为环境变量）'
- en: Then, we wrote and executed the PowerShell script that calls the workspace creation
    API for each of these variables.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们编写并执行了PowerShell脚本，调用了每个变量的工作区创建API。
- en: In this recipe, we created these four environment variables because the Terraform
    configuration we used as an example manages an Azure infrastructure. This step
    is optional if you don't need environment variables.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们创建了这四个环境变量，因为我们作为示例使用的Terraform配置管理的是Azure基础设施。如果不需要环境变量，这一步是可选的。
- en: In addition, the documentation for the variables API is available at [https://www.terraform.io/docs/cloud/api/workspace-variables.html](https://www.terraform.io/docs/cloud/api/workspace-variables.html).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，变量API的文档可以在此查看：[https://www.terraform.io/docs/cloud/api/workspace-variables.html](https://www.terraform.io/docs/cloud/api/workspace-variables.html)。
- en: 'At the end of its execution, in the Terraform Cloud UI, we will be able to
    see the new variable environments:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行结束时，在Terraform Cloud UI中，我们将能够看到新的变量环境：
- en: '![](img/93322496-c740-45b6-b9db-056a1ba1fc1c.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93322496-c740-45b6-b9db-056a1ba1fc1c.png)'
- en: 'Finally, in *steps 7* to *9*, we used the API to trigger a run – that is, the
    execution of the Terraform configuration we defined in the workspace (in the VCS).
    To do this, we created a file called `run.json` that will also be used as a payload
    for the API. This contains the following properties:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*步骤7*到*步骤9*，我们使用API触发了一个运行——即在工作区（在VCS中）定义的Terraform配置的执行。为此，我们创建了一个名为`run.json`的文件，该文件也将作为API的有效载荷使用。它包含了以下属性：
- en: '`message`: Message about the run'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`: 关于运行的消息'
- en: '`workspace.id`: Workspace ID'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workspace.id`: 工作区ID'
- en: 'Then, we wrote and executed the PowerShell script that calls the `run` trigger
    API. At the end of its execution, we saw that the execution of Terraform is triggered
    in Terraform Cloud, as shown in the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编写并执行了调用 `run` 触发器 API 的 PowerShell 脚本。在其执行结束时，我们看到 Terraform 在 Terraform
    Cloud 中被触发执行，如下图所示：
- en: '![](img/47703ed7-5261-423d-af62-26fe8b7f0ce6.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47703ed7-5261-423d-af62-26fe8b7f0ce6.png)'
- en: By using the `auto-apply` property of the workspace, `terraform apply` will
    complete automatically, without requiring manual configuration by the user.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用工作区的 `auto-apply` 属性，`terraform apply` 将自动完成，无需用户手动配置。
- en: There's more…
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In this recipe, we looked at the simple and basic use of the Terraform cloud
    APIs. As always, there are many other scenarios in which we can use them.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们查看了 Terraform Cloud API 的简单基本使用。如同往常一样，还有许多其他场景可以使用它们。
- en: Remember to protect the API token and any Azure or similar tokens by not putting
    them in clear text in your scripts.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，通过不将 API 令牌和任何 Azure 或类似的令牌以明文形式放入脚本中，来保护它们。
- en: Furthermore, to stay in an IaC context, instead of using the APIs directly,
    you can use the Terraform configuration with the **Terraform Enterprise** **provider**,
    which is documented here: [https://www.terraform.io/docs/providers/tfe/index.html](https://www.terraform.io/docs/providers/tfe/index.html).
    It is also recommended by HashiCorp for Terraform Cloud administration purposes.
    You can find more information about this at [https://www.terraform.io/docs/cloud/api/index.html](https://www.terraform.io/docs/cloud/api/index.html)
    (first note).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了保持在 IaC 的上下文中，您可以使用带有 **Terraform Enterprise** **提供程序** 的 Terraform 配置，而不是直接使用
    API，该文档在这里：[https://www.terraform.io/docs/providers/tfe/index.html](https://www.terraform.io/docs/providers/tfe/index.html)。这也是
    HashiCorp 推荐用于 Terraform Cloud 管理的方式。您可以在[https://www.terraform.io/docs/cloud/api/index.html](https://www.terraform.io/docs/cloud/api/index.html)（第一条注释）中找到更多信息。
- en: See also
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation about the various Terraform Cloud APIs is available here: [https://www.terraform.io/docs/cloud/api/index.html](https://www.terraform.io/docs/cloud/api/index.html).
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于各种 Terraform Cloud API 的文档可以在这里查看：[https://www.terraform.io/docs/cloud/api/index.html](https://www.terraform.io/docs/cloud/api/index.html)。
- en: The following is a video demonstration on the use of Terraform Cloud/Enterprise
    APIs: [https://www.hashicorp.com/resources/demystifying-the-terraform-enterprise-api/](https://www.hashicorp.com/resources/demystifying-the-terraform-enterprise-api/).
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是关于使用 Terraform Cloud/Enterprise API 的视频演示：[https://www.hashicorp.com/resources/demystifying-the-terraform-enterprise-api/](https://www.hashicorp.com/resources/demystifying-the-terraform-enterprise-api/)。
- en: Testing the compliance of Terraform configurations using Sentinel
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sentinel 测试 Terraform 配置的合规性
- en: The aspect of Terraform configuration tests has been discussed several times
    in this book, such as using `terratest` (in the *Testing Terraform module code
    with Terratest* recipe of [Chapter 5](d054157b-d534-47c9-8079-3af13107c4ef.xhtml), *Provisioning
    Azure Infrastructure with Terraform*) and `kitchen-terraform` (in the *Testing
    Terraform configuration using kitchen-terraform* recipe of [Chapter 7](905f7886-2827-44fe-af8c-4f9f3e3a9cef.xhtml), *Deep
    Diving into Terraform*). The common point of these two tools is that the purpose
    of the tests is to write and test the changes that have already been applied by
    Terraform.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中已多次讨论过 Terraform 配置测试的相关内容，例如使用 `terratest`（在[第5章](d054157b-d534-47c9-8079-3af13107c4ef.xhtml)的
    *使用 Terratest 测试 Terraform 模块代码* 配方和 *使用 Terraform 配置 Azure 基础设施* 配方中）和 `kitchen-terraform`（在[第7章](905f7886-2827-44fe-af8c-4f9f3e3a9cef.xhtml)的
    *使用 kitchen-terraform 测试 Terraform 配置* 配方和 *深入探索 Terraform* 配方中）。这两种工具的共同点是，测试的目的是编写并测试
    Terraform 已经应用的更改。
- en: All these tests are very beneficial but they are done after the changes have
    been made. The rollback also requires work from all teams. To be even more in
    line with the business and financial requirements of the company, there is another
    level of testing that verifies the compliance of the Terraform configuration before
    it is applied to the target infrastructure.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些测试都非常有益，但它们是在做出更改后进行的。回滚也需要所有团队的协作。为了更好地与公司的业务和财务需求对接，另有一层测试，用于在应用到目标基础设施之前验证
    Terraform 配置的合规性。
- en: In Terraform, these compliance tests are carried out after the `terraform plan`
    command is executed. They verify that the result of the `plan` command corresponds
    to the rules described in the tests. Only if these tests have passed can the `terraform
    apply` command be executed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在Terraform中，这些合规性测试在执行`terraform plan`命令后进行。它们验证`plan`命令的结果是否符合测试中描述的规则。只有这些测试通过后，才能执行`terraform
    apply`命令。
- en: Among the tools and frameworks for compliance testing, Terraform Cloud offers,
    in its paid plan, the stack, which allows us to write tests using the **Sentinel**
    framework and execute them directly in Terraform Cloud by using the `run` command
    between `plan` and `apply`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在合规性测试的工具和框架中，Terraform Cloud在其付费计划中提供了栈功能，允许我们使用**Sentinel**框架编写测试，并通过在`plan`和`apply`之间使用`run`命令直接在Terraform
    Cloud中执行它们。
- en: In this recipe, we will study a simple case of writing compliance tests and
    executing them in Terraform Cloud.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将研究一个简单的案例，编写合规性测试并在Terraform Cloud中执行它们。
- en: Getting ready
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The essential requirement for this recipe is to have a Terraform Cloud paid
    plan. We will be using Team & Governance:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的基本要求是拥有Terraform Cloud的付费计划。我们将使用Team & Governance功能：
- en: '![](img/9eb5bfb1-8b7d-4b09-882b-4f271a768a44.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb5bfb1-8b7d-4b09-882b-4f271a768a44.png)'
- en: 'If you have the free plan, you can try all the features of the paid plan for
    30 days by activating your free trial:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是免费计划，您可以通过激活免费试用，体验付费计划的所有功能30天：
- en: '![](img/1663a27d-194f-44bd-90ae-2d61676251ac.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1663a27d-194f-44bd-90ae-2d61676251ac.png)'
- en: Documentation about the plans, prices, and features is available here: [https://www.terraform.io/docs/cloud/paid.html](https://www.terraform.io/docs/cloud/paid.html).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 关于计划、价格和功能的文档可以在这里找到：[https://www.terraform.io/docs/cloud/paid.html](https://www.terraform.io/docs/cloud/paid.html)。
- en: The Terraform configuration that we will be using has already been discussed
    and is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote).
    This configuration will create a Resource Group, a Service Plan, and an Azure
    App Service.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的Terraform配置已在之前讨论过，并可以在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/remote)找到。此配置将创建一个资源组，一个服务计划和一个Azure应用服务。
- en: In addition, to use the code written in this recipe in your organization, you
    need to create a fork of the original repository of this book ([https://github.com/PacktPublishing/Terraform-Cookbook](https://github.com/PacktPublishing/Terraform-Cookbook)).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要在您的组织中使用本教程中编写的代码，您需要创建该书原始仓库的一个分支（[https://github.com/PacktPublishing/Terraform-Cookbook](https://github.com/PacktPublishing/Terraform-Cookbook)）。
- en: 'The goal of this recipe is to write the rules, as part of policy sets, that
    will test the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是编写作为策略集一部分的规则，用来测试以下内容：
- en: That the FTP mode for the App Service is configured only with FTPS mode.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求应用服务的FTP模式仅配置为FTPS模式。
- en: That the Service Plan that will be provisioned to an SKU tier type is either
    Basic or Standard. This rule prohibits the provisioning of Premium or Premium
    v2 Service Plan.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提供给SKU层级类型的服务计划必须是Basic或Standard。此规则禁止提供Premium或Premium v2服务计划。
- en: Then, we will learn how to apply these policy sets during the execution of Terraform
    Cloud.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在Terraform Cloud执行时应用这些策略集。
- en: To write these policies, we will use **Sentinel**, which is a test framework
    provided by HashiCorp. Its documentation is available at [https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/](https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写这些策略，我们将使用**Sentinel**，这是HashiCorp提供的一个测试框架。其文档可以在[https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/](https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/)找到。
- en: The purpose of this recipe is not to study all the elements for writing policies
    (the preceding guide can be used for that). Here, we will be writing some simple
    code that you can easily reproduce.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目的不是研究编写策略的所有元素（前面的指南可以用于此）。在这里，我们将编写一些简单的代码，您可以轻松地复现。
- en: Finally, the `demo-app-remote` workspace must be created and configured in Terraform
    Cloud, as described in the *Executing Terraform configuration remotely in Terraform
    Cloud* recipe of this chapter.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，必须在Terraform Cloud中创建并配置`demo-app-remote`工作区，具体操作可以参考本章中的*在Terraform Cloud中远程执行Terraform配置*教程。
- en: The source code for this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/sentinel-policies](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/sentinel-policies).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方的源代码可以在此处找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/sentinel-policies](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/sentinel-policies).
- en: How to do it…
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To complete this recipe, we will do three things:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，我们需要完成三件事情：
- en: Write the policy rules
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写策略规则
- en: Configure the organization in order to integrate these policies
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置组织以便集成这些策略
- en: Run the Terraform configuration with these policies
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些策略运行 Terraform 配置
- en: 'We start by writing the compliance policies, as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先编写合规性策略，如下所示：
- en: The code we will be writing in this part can be in the same repository where
    the configuration to be tested is located. Alternatively, if its policies are
    shared, then this code can be put in another repository.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此部分编写的代码可以与要测试的配置位于同一个仓库中。或者，如果其策略是共享的，则可以将此代码放入另一个仓库中。
- en: It is still a good practice to put these policies in a separate repository so
    that you don't mix the Terraform configuration commits of the policy. Another
    reason to do this would be that this separate repository could be managed by another
    team (such as ops or security).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些策略放在一个单独的仓库中仍然是一个好的实践，这样你就不会混合策略的 Terraform 配置提交。另一个做法是，这个独立的仓库可以由另一个团队（如运维或安全团队）管理。
- en: In this recipe, for simplicity, we will write our code in the repository that
    contains the Terraform configuration, which has already been integrated into the
    VCS providers of our organization.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，为了简单起见，我们将代码写入包含 Terraform 配置的仓库中，该仓库已经集成到我们组织的 VCS 提供者中。
- en: 'Inside a new folder, `sentinel-policies`, create a new file called `restrict-app-service-to-ftps.sentinel` to
    test the FTP mode of the App Service instance. Use the following code to do so:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新文件夹 `sentinel-policies` 内，创建一个名为 `restrict-app-service-to-ftps.sentinel`
    的新文件，以测试 App Service 实例的 FTP 模式。使用以下代码完成：
- en: '[PRE13]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The complete source code for this file is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/restrict-app-service-to-ftps.sentinel](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/restrict-app-service-to-ftps.sentinel).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的完整源代码可以在此处找到：[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/restrict-app-service-to-ftps.sentinel](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/restrict-app-service-to-ftps.sentinel).
- en: 'Create a new file called `allowed-app-service-plan-tiers.sentinel` to test
    the type of Service Plan SKU. Ensure it contains the following content:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `allowed-app-service-plan-tiers.sentinel` 的新文件来测试服务计划 SKU 的类型。确保它包含以下内容：
- en: '[PRE14]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The complete source code for this file (with comments) is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/allowed-app-service-plan-tiers.sentinel](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/allowed-app-service-plan-tiers.sentinel).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的完整源代码（带有注释）可以在此处找到：[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/allowed-app-service-plan-tiers.sentinel](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP08/sentinel-policies/allowed-app-service-plan-tiers.sentinel).
- en: 'Create a new file called `sentinel.hcl`. This will be the entry point for the
    tests and references of the two preceding policies. Add the following content:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `sentinel.hcl` 的新文件。这将是测试和引用前述两个策略的入口点。添加以下内容：
- en: '[PRE15]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Commit and push all the files into the remote repository.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有文件提交并推送到远程仓库。
- en: 'For the second phase, we need to configure Policy Sets in our Terraform Cloud
    organization:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二阶段，我们需要在我们的 Terraform Cloud 组织中配置策略集：
- en: 'In your organization Settings, go to the Policy Sets tab and click on the Connect
    a new policy set button:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的组织设置中，转到策略集选项卡，然后点击“连接新策略集”按钮：
- en: '![](img/113d055f-437d-4605-8fab-66c3e49dab5b.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/113d055f-437d-4605-8fab-66c3e49dab5b.png)'
- en: 'In the first step of the wizard, choose the VCS provider that contains the
    code for the policies we just wrote:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的第一步中，选择包含我们刚编写的策略代码的 VCS 提供者：
- en: '![](img/9bee5245-536a-4635-a224-dfc8f41c3106.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bee5245-536a-4635-a224-dfc8f41c3106.png)'
- en: 'In the second step, select the repository that contains the policy''s code:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二步中，选择包含策略代码的仓库：
- en: '![](img/d4e7d6fe-9928-4cba-8571-94c813bb7df0.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4e7d6fe-9928-4cba-8571-94c813bb7df0.png)'
- en: 'In the last step of the wizard, configure the policy set by adding Name and
    Description details, as shown in the following screenshot:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的最后一步，配置策略集，添加名称和描述详情，如下截图所示：
- en: '![](img/8cb58246-a389-442e-8362-8d5fd5726704.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cb58246-a389-442e-8362-8d5fd5726704.png)'
- en: 'Under Additional options, specify the folder that contains the code policies
    and the target workspace that will use these policies:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在“附加选项”下，指定包含代码策略的文件夹以及将使用这些策略的目标工作区：
- en: '![](img/63cf27d1-d6a5-420b-9aa8-6b1aae1727d5.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63cf27d1-d6a5-420b-9aa8-6b1aae1727d5.png)'
- en: 'The following screenshot shows the workspaces you need to choose in order to
    use the policy set:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您需要选择的工作区，以便使用该策略集：
- en: '![](img/3ae840d7-b2fb-40ba-9754-695398278646.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ae840d7-b2fb-40ba-9754-695398278646.png)'
- en: Click on the Connect policy set button to create the policy sets.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“连接策略集”按钮来创建策略集。
- en: 'Now, we can run the Terraform configuration in Terraform Cloud and check the
    policies:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在Terraform Cloud中运行Terraform配置并检查策略：
- en: In the `demo-app-remote` workspace we created in the *Executing Terraform configuration
    remotely in Terraform Cloud* recipe of this chapter, we will queue a new Terraform
    `run`.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中我们在*在Terraform Cloud中远程执行Terraform配置*配方中创建的`demo-app-remote`工作区中，我们将排队执行一个新的Terraform
    `run`。
- en: 'In the results of this `run`, we will be able to see the policy check''s result:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此`run`的结果中，我们将能够看到策略检查的结果：
- en: '![](img/80226245-bf5f-4bcb-9e56-811c6093e811.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80226245-bf5f-4bcb-9e56-811c6093e811.png)'
- en: 'If the policy check if successful, apply the changes by clicking the Confirm
    & Apply button:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果策略检查成功，请通过点击“确认并应用”按钮来应用更改：
- en: '![](img/9e9c8084-fb4f-4071-96a1-62014c2ddfbe.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e9c8084-fb4f-4071-96a1-62014c2ddfbe.png)'
- en: How it works…
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the first part of this recipe, we wrote the compliance tests so that we could
    test our Terraform configuration using **Sentinel**.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程的第一部分，我们编写了合规性测试，以便通过**Sentinel**测试我们的Terraform配置。
- en: 'In the `restrict-app-service-to-ftps.sentinel` file, by writing the `import
    "tfplan-functions" as plan` line, we imported a Sentinel function library, which
    is available at [https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation/common-functions/tfplan-functions](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation/common-functions/tfplan-functions). The
    lines after that line search for all `azurerm_app_service` resources in the `terraform
    plan` command and check that the FTPS state is configured to FTPS only:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在`restrict-app-service-to-ftps.sentinel`文件中，通过编写`import "tfplan-functions" as
    plan`这一行，我们导入了一个Sentinel函数库，该库可以在[https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation/common-functions/tfplan-functions](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation/common-functions/tfplan-functions)找到。此行之后的代码会在`terraform
    plan`命令中搜索所有`azurerm_app_service`资源，并检查FTPS状态是否仅配置为FTPS：
- en: '[PRE16]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is the call point of the test and sends a message in the event of an error
    with a non-compliant FTPS state.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试的调用点，当FTPS状态不合规时会发送一条错误信息。
- en: 'In the second file, `allowed-app-service-plan-tiers.sentinel`, we wrote the
    `allowed_tiers = ["Basic", "Standard"]` line to create a list of SKUs that are
    allowed for the Service Plan. The lines search for all `azurerm_service_plan`
    resources in `terraform plan` and check that the SKU is in the list we declared
    previously:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个文件`allowed-app-service-plan-tiers.sentinel`中，我们编写了`allowed_tiers = ["Basic",
    "Standard"]`这一行，以创建一个允许用于服务计划的SKU列表。这些行会在`terraform plan`中搜索所有`azurerm_service_plan`资源，并检查SKU是否在我们之前声明的列表中：
- en: '[PRE17]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is the call point of the test and sends a message in the event of an error
    with a non-compliant SKU.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这是测试的调用点，当SKU不合规时会发送一条错误信息。
- en: The third file we wrote, `sentinel.hcl`, is the entry point for the test file.
    We used a module that imports the custom library and the declaration of the two
    policies that refer to the two files we wrote earlier.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的第三个文件`sentinel.hcl`是测试文件的入口点。我们使用了一个模块来导入自定义库，并声明了两个策略，分别引用我们之前编写的两个文件。
- en: Other examples of Sentinel tests are available here: [https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Sentinel测试的其他示例可以在此处找到：[https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation)。
- en: Then, in the second part of this recipe, we configured the policy sets in our
    Terraform Cloud organization by selecting the repository that contains the Sentinel
    code and selecting the workspaces that these policies will apply to.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在本配方的第二部分，我们通过选择包含Sentinel代码的存储库，并选择这些策略将应用于的工作区，在我们的Terraform Cloud组织中配置了策略集。
- en: Finally, once the tests had been written and the configuration of the policy
    sets had been carried out, we triggered a Terraform `run` (in remote mode) on
    the workspace we selected in the policy sets and the result of the poster with
    successful compliance tests.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，一旦编写了测试并完成了策略集的配置，我们在策略集中选择的工作区上触发了Terraform `run`（远程模式），并且合规性测试成功的结果展示出来。  '
- en: There's more…
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'After completing this recipe, all the tests passed successfully, but what is
    interesting is testing their functionality by testing a case where they fail.
    To do this, we need to sufficiently modify the Terraform configuration that is
    used in the workspace by modifying the SKU type of the Service Plan, as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此配方后，所有测试都成功通过，但有趣的是通过测试一个失败的案例来测试它们的功能。为此，我们需要通过修改服务计划的SKU类型，充分修改在工作区中使用的Terraform配置，如下所示：
- en: '[PRE18]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This SKU takes a `Premium` value that was prohibited in the list of SKUs allowed
    in the tests. Then, we execute `run`. During its execution, we get the following
    result:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 此SKU采用`Premium`值，而该值在测试中允许的SKU列表中是被禁止的。然后，我们执行`run`。在执行过程中，我们得到以下结果：
- en: '![](img/777b10d1-26ee-4b26-bd59-ad20583cbf4a.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/777b10d1-26ee-4b26-bd59-ad20583cbf4a.png)'
- en: As we can see, the compliance tests failed after the `terraform plan` command
    was run and the implementation of the changes is refused.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，在运行`terraform plan`命令后，合规性测试失败，并且更改的实施被拒绝。
- en: As far as blocking the application is concerned, this is configured in the `sentinel.hcl`
    file with the `enforcement_level ="hard-mandatory"` property for each policy.
    To find out more about the values of this property and their implication, read
    the documentation at [https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/](https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/)
    [and here](https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/) [https://www.terraform.io/docs/cloud/sentinel/manage-policies.html](https://www.terraform.io/docs/cloud/sentinel/manage-policies.html).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 就阻止应用而言，这是在`sentinel.hcl`文件中为每个策略配置的，使用`enforcement_level = "hard-mandatory"`属性。要了解此属性的更多值及其含义，请阅读[https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/](https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/)文档[以及这里](https://docs.hashicorp.com/sentinel/concepts/enforcement-levels/)
    [https://www.terraform.io/docs/cloud/sentinel/manage-policies.html](https://www.terraform.io/docs/cloud/sentinel/manage-policies.html)。
- en: See also
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'The code for Sentinel functions is available here: [https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation).'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sentinel函数的代码可以在这里找到：[https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation](https://github.com/hashicorp/terraform-guides/tree/master/governance/third-generation)。
- en: The documentation on how to install the Sentinel CLI is available at [https://docs.hashicorp.com/sentinel/intro/getting-started/install/](https://docs.hashicorp.com/sentinel/intro/getting-started/install/).
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Sentinel CLI的文档可以在这里找到：[https://docs.hashicorp.com/sentinel/intro/getting-started/install/](https://docs.hashicorp.com/sentinel/intro/getting-started/install/)。
- en: The guide to writing and installing policies is available here: [https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/](https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/).
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和安装策略的指南可以在这里找到：[https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/](https://www.hashicorp.com/resources/writing-and-testing-sentinel-policies-for-terraform/)。
- en: The basic learning guide for policies is available here: [https://learn.hashicorp.com/terraform/cloud-getting-started/enforce-policies](https://learn.hashicorp.com/terraform/cloud-getting-started/enforce-policies).
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略的基本学习指南可以在这里找到：[https://learn.hashicorp.com/terraform/cloud-getting-started/enforce-policies](https://learn.hashicorp.com/terraform/cloud-getting-started/enforce-policies)。
- en: Read this article to learn more about the use of Sentinel: [https://medium.com/hashicorp-engineering/using-new-sentinel-features-in-terraform-cloud-c1ade728cbb0](https://medium.com/hashicorp-engineering/using-new-sentinel-features-in-terraform-cloud-c1ade728cbb).
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读这篇文章以了解更多关于Sentinel的使用：[https://medium.com/hashicorp-engineering/using-new-sentinel-features-in-terraform-cloud-c1ade728cbb0](https://medium.com/hashicorp-engineering/using-new-sentinel-features-in-terraform-cloud-c1ade728cbb)。
- en: The following is a video that demonstrates policy testing: [https://www.hashicorp.com/resources/testing-terraform-sentinel-policies-using-mocks/](https://www.hashicorp.com/resources/testing-terraform-sentinel-policies-using-mocks/).
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一个示范策略测试的视频：[https://www.hashicorp.com/resources/testing-terraform-sentinel-policies-using-mocks/](https://www.hashicorp.com/resources/testing-terraform-sentinel-policies-using-mocks/)。
- en: 'There are other tools we can use to write and execute Terraform compliance
    configuration, such as *terraform-compliance* ([https://github.com/eerkunt/terraform-compliance](https://github.com/eerkunt/terraform-compliance))
    and *Open Policy Agent* ([https://www.openpolicyagent.org/docs/latest/terraform/](https://www.openpolicyagent.org/docs/latest/terraform/)).
    They are both free and open source, but beware: they can''t be used in a Terraform
    Cloud execution.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以使用其他工具来编写和执行 Terraform 合规性配置，例如 *terraform-compliance* ([https://github.com/eerkunt/terraform-compliance](https://github.com/eerkunt/terraform-compliance))
    和 *Open Policy Agent* ([https://www.openpolicyagent.org/docs/latest/terraform/](https://www.openpolicyagent.org/docs/latest/terraform/))。它们都是免费且开源的，但请注意：它们不能在
    Terraform Cloud 执行中使用。
- en: Using cost estimation for cloud cost resources governance
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用成本估算进行云资源的成本治理
- en: When we create resources in a cloud architecture, we often tend to forget that
    this incurs a financial cost that depends on the types of resources that are created.
    This is even more true with automation and IaC, which allow us to create a multitude
    of resources using a few commands.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在云架构中创建资源时，往往会忘记这些操作会带来财务成本，而这个成本取决于创建的资源类型。使用自动化和基础设施即代码（IaC）时尤为如此，因为它们允许我们通过少量命令创建大量资源。
- en: One of the interesting features of the version of Terraform Cloud that's integrated
    into the paid plan is cost estimation, which makes it possible to visualize the
    cost of the resources that are handled in the Terraform configuration while it's
    being run.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在付费版的 Terraform Cloud 中集成的一个有趣功能是成本估算，它使我们能够在运行 Terraform 配置时，实时可视化所管理资源的成本。
- en: In this recipe, we will learn how to use cost estimation in Terraform Cloud.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何在 Terraform Cloud 中使用成本估算。
- en: Getting ready
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you start this recipe, you must have a paid Terraform Cloud plan or
    activate the free trial (for a 30-day duration):'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本教程之前，你必须拥有一个付费的 Terraform Cloud 计划，或激活免费的 30 天试用：
- en: '![](img/ebc2228a-8813-45fd-825a-6653697b964f.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebc2228a-8813-45fd-825a-6653697b964f.png)'
- en: After doing this, you need to get to know the cloud providers and the resources
    that are supported by the cost management functionality. This list is available
    at [https://www.terraform.io/docs/cloud/cost-estimation/index.html#supported-resources](https://www.terraform.io/docs/cloud/cost-estimation/index.html#supported-resources).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您需要了解云提供商以及成本管理功能支持的资源。此列表可在[https://www.terraform.io/docs/cloud/cost-estimation/index.html#supported-resources](https://www.terraform.io/docs/cloud/cost-estimation/index.html#supported-resources)查看。
- en: The purpose of this recipe is to provision a virtual machine in Azure with Terraform
    and to visualize the cost estimation of this resource in the Terraform Cloud interface.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目的是通过 Terraform 在 Azure 上配置一个虚拟机，并在 Terraform Cloud 界面中可视化该资源的成本估算。
- en: The source code for the Terraform configuration that will be executed in this
    recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/cost](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/cost).
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中将执行的 Terraform 配置的源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/cost](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP08/cost)。
- en: How to do it…
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To view the estimation of cost for our resources, perform the following steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们资源的成本估算，请执行以下步骤：
- en: 'In the Settings section of the Terraform Cloud organization, in the Cost Estimation
    tab, check the Enable Cost Estimation for all workspaces checkbox:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Terraform Cloud 组织的设置部分，进入成本估算标签页，勾选“启用所有工作空间的成本估算”复选框：
- en: '![](img/91d03bfa-68a5-44ba-923e-fed328e01a5c.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91d03bfa-68a5-44ba-923e-fed328e01a5c.png)'
- en: In the created workspace that provisions the Azure VM with our Terraform configuration,
    queue a new `run`.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在已创建的工作空间中，通过我们的 Terraform 配置来配置 Azure 虚拟机，然后排队执行一个新的`run`。
- en: 'Just after executing our `plan`, we can view the evaluated cost of the resource:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行我们的`plan`之后，我们可以查看资源的评估成本：
- en: '![](img/a299bda9-d34a-4ae2-8eef-3e27ba37df5f.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a299bda9-d34a-4ae2-8eef-3e27ba37df5f.png)'
- en: How it works…
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Once the cost estimation option has been activated, Terraform Cloud uses the
    APIs of the different cloud providers to evaluate and display the costs of the
    resources that will be provisioned.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用了成本估算选项，Terraform Cloud 将使用不同云服务提供商的 API 来评估并显示将要配置的资源的成本。
- en: There's more…
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: It is important to note that this is only an estimate and that it is necessary
    to refer to the different price documentations of the cloud providers.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，这只是一个估算值，仍然需要参考各云服务提供商的不同定价文档。
- en: You can also write policies with Sentinel (which we studied in the previous
    recipe) to integrate compliance rules for estimated costs. For more information,
    please read the documentation at [https://www.terraform.io/docs/cloud/cost-estimation/index.html#verifying-costs-in-policies](https://www.terraform.io/docs/cloud/cost-estimation/index.html#verifying-costs-in-policies).
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 Sentinel（我们在之前的配方中学习过）编写策略，以集成符合成本估算的合规规则。有关更多信息，请阅读文档：[https://www.terraform.io/docs/cloud/cost-estimation/index.html#verifying-costs-in-policies](https://www.terraform.io/docs/cloud/cost-estimation/index.html#verifying-costs-in-policies)。
- en: See also
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation regarding the cost estimation feature is available here: [https://www.terraform.io/docs/cloud/cost-estimation/index.html](https://www.terraform.io/docs/cloud/cost-estimation/index.html).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 关于成本估算功能的文档可以在此查看：[https://www.terraform.io/docs/cloud/cost-estimation/index.html](https://www.terraform.io/docs/cloud/cost-estimation/index.html)。
